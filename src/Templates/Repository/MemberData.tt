<#@ template language="C#" #>
<#@ assembly name="System.Core" #>

<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Net" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SharpDox.UML" #>
<#@ import namespace="SharpDox.Model" #>
<#@ import namespace="SharpDox.Model.Repository.Members" #>
<#@ import namespace="SharpDox.Model.Documentation" #>
<#@ import namespace="SharpDox.Model.Documentation.Token" #>
<#@ import namespace="SharpDox.Model.Documentation.Article" #>
<#@ import namespace="SharpDox.Plugins.Html.Steps" #>
<#@ import namespace="CommonMark" #>

{
	"id": "<#= Member.Identifier #>",
	"shortIdentifier": "<#= Member.ShortIdentifier #>",
	"type": "<#= MemberType #>",
	"accessibility": "<#= Member.Accessibility #>",

	<# if(Member is SDMethod) { 
		var sdMethod = (SDMethod)Member; #>
		"name": "<#= sdMethod.Signature #>",
		"hasSequenceDiagram": <#= !sdMethod.IsSequenceDiagramEmpty() && !StepInput.HtmlConfig.DisableSequenceDiagrams ? "true" : "false" #>,
	<# } else { #>
		"name": "<#= Member.Name #>",
	<# } #> 
	
	<# if(Member is SDField && !string.IsNullOrEmpty(((SDField)Member).ConstantValue)) { #>
		"constantValue":" <#= ((SDField)Member).ConstantValue #>", 
	<# } #>

	<#	var documentation = Member.Documentations.GetElementOrDefault(StepInput.CurrentLanguage);
	if(documentation != null){
		var documentationTemplate = new DocumentationData { Documentation = documentation }; #>
		<#= documentationTemplate.TransformText() #>	
	<# } #>

	"syntax": "<#= Member.Syntax #>"
}

<#+	public SDMember Member { get; set; } #>
<#+	public string MemberType { get; set; } #>
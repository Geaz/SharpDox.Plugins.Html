<#@ template language="C#" #>
<#@ assembly name="System.Core" #>

<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Net" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SharpDox.Model" #>
<#@ import namespace="SharpDox.Model.Documentation" #>
<#@ import namespace="SharpDox.Model.Documentation.Token" #>
<#@ import namespace="SharpDox.Model.Documentation.Article" #>
<#@ import namespace="SharpDox.Plugins.Html.Steps" #>
<#@ import namespace="CommonMark" #>

<# var helper = new Helper(StepInput.SDProject);

var documentation = new List<string>();
if(Documentation.Summary.Count > 0) {
	documentation.Add(string.Format("\"summary\":\"{0}\"", helper.ToObjectString(CommonMarkConverter.Convert(Documentation.Summary.ToMarkdown(StepInput.SDProject.Tokens).Transform(helper.TransformLinkToken)))));
} 
if(Documentation.Remarks.Count > 0) {
	documentation.Add(string.Format("\"remarks\":\"{0}\"", helper.ToObjectString(CommonMarkConverter.Convert(Documentation.Remarks.ToMarkdown(StepInput.SDProject.Tokens).Transform(helper.TransformLinkToken)))));
}
if(Documentation.Example.Count > 0) {
	documentation.Add(string.Format("\"example\":\"{0}\"", helper.ToObjectString(CommonMarkConverter.Convert(Documentation.Example.ToMarkdown(StepInput.SDProject.Tokens).Transform(helper.TransformLinkToken)))));
}
if(Documentation.Returns.ContainsKey("default")) {
	documentation.Add(string.Format("\"returns\":\"{0}\"", helper.ToObjectString(CommonMarkConverter.Convert(Documentation.Returns["default"].ToMarkdown(StepInput.SDProject.Tokens).Transform(helper.TransformLinkToken)))));
}
if(Documentation.Exceptions.Count > 0) {
	documentation.Add(string.Format("\"exceptions\":{0}", 
				string.Join(",", Documentation.Exceptions.Select(exception => 
					string.Format("{{\"key\": \"{0}\",\"value\": \"{1}\"}}", exception.Key, 
					helper.ToObjectString(CommonMarkConverter.Convert(exception.Value.ToMarkdown(StepInput.SDProject.Tokens).Transform(helper.TransformLinkToken))))))));
}
if(Documentation.Params.Count > 0) {
	documentation.Add(string.Format("\"params\":{0}", 
				string.Join(",", Documentation.Params.Select(param => 
					string.Format("{{\"key\": \"{0}\",\"value\": \"{1}\"}}", param.Key, 
					helper.ToObjectString(CommonMarkConverter.Convert(param.Value.ToMarkdown(StepInput.SDProject.Tokens).Transform(helper.TransformLinkToken))))))));
}
if(Documentation.TypeParams.Count > 0) {
	documentation.Add(string.Format("\"params\":{0}", 
				string.Join(",", Documentation.TypeParams.Select(typeParam => 
					string.Format("{{\"key\": \"{0}\",\"value\": \"{1}\"}}", typeParam.Key, 
					helper.ToObjectString(CommonMarkConverter.Convert(typeParam.Value.ToMarkdown(StepInput.SDProject.Tokens).Transform(helper.TransformLinkToken))))))));	
}
if(Documentation.SeeAlsos.Count > 0 ){
	var seeAlsos = new List<string>();
	foreach(var sdToken in Documentation.SeeAlsos){
		var seeAlso = (SDSeeToken)sdToken;
		if(!string.IsNullOrEmpty(seeAlso.DeclaringType))
		{
			var identifier = string.Format("{0}.{1}", seeAlso.DeclaringType, seeAlso.Name);
			seeAlsos.Add(string.Format("{{\"type\":\"\", \"id\":\"{0}\", \"name\":\"{1}\"}}", identifier, seeAlso.Name));
        }
		else
		{
			var identifier = string.Format("{0}.{1}", seeAlso.Namespace, seeAlso.Name);
			seeAlsos.Add(string.Format("{{\"type\":\"\", \"id\":\"{0}\", \"name\":\"{1}\"}}", identifier, seeAlso.Name)); 
		} 	
    }
	documentation.Add(string.Format("\"seeAlsos\":[{0}]", string.Join(",", seeAlsos)));
} #>

<#= string.Join(",", documentation) + "," #>


<#+	public SDDocumentation Documentation { get; set; } #>
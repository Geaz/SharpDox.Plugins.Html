<#@ template language="C#" #>
<#@ assembly name="System.Core" #>

<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Net" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SharpDox.Model" #>
<#@ import namespace="SharpDox.Model.Documentation" #>
<#@ import namespace="SharpDox.Model.Documentation.Token" #>
<#@ import namespace="SharpDox.Model.Documentation.Article" #>
<#@ import namespace="SharpDox.Plugins.Html.Steps" #>
<#@ import namespace="CommonMark" #>

<# var helper = new Helper(StepInput.SDProject); #>

<# if(Documentation.Summary.Count > 0) { #> 
	summary: "<#= helper.ToObjectString(CommonMarkConverter.Convert(Documentation.Summary.ToMarkdown(StepInput.SDProject.Tokens).Transform(helper.TransformLinkToken))) #>",
<# }

if(Documentation.Remarks.Count > 0) { #> 
	remarks: "<#= helper.ToObjectString(CommonMarkConverter.Convert(Documentation.Remarks.ToMarkdown(StepInput.SDProject.Tokens).Transform(helper.TransformLinkToken))) #>",
<# }

if(Documentation.Example.Count > 0) { #> 
	example: "<#= helper.ToObjectString(CommonMarkConverter.Convert(Documentation.Example.ToMarkdown(StepInput.SDProject.Tokens).Transform(helper.TransformLinkToken))) #>",
<# }

if(Documentation.Returns.ContainsKey("default")) { #>
	returns: "<#= helper.ToObjectString(CommonMarkConverter.Convert(Documentation.Returns["default"].ToMarkdown(StepInput.SDProject.Tokens).Transform(helper.TransformLinkToken))) #>",
<# }

if(Documentation.Exceptions.Count > 0) { #> 
	exceptions: [
		<# foreach(var exception in Documentation.Exceptions) { #>
			{
				key: "<#= exception.Key #>",
				value: "<#= helper.ToObjectString(CommonMarkConverter.Convert(exception.Value.ToMarkdown(StepInput.SDProject.Tokens).Transform(helper.TransformLinkToken))) #>" 
			},
		<# } #>
	],
<# }

if(Documentation.Params.Count > 0) { #> 
	params: [
		<# foreach(var param in Documentation.Params) { #>
			{
				key: "<#= param.Key #>",
				value: "<#= helper.ToObjectString(CommonMarkConverter.Convert(param.Value.ToMarkdown(StepInput.SDProject.Tokens).Transform(helper.TransformLinkToken))) #>" 
			},
		<# } #>
	],
<# }

if(Documentation.TypeParams.Count > 0) { #> 
	typeParams: [
		<# foreach(var typeParam in Documentation.TypeParams) { #>
			{
				key: "<#= typeParam.Key #>",
				value: "<#= helper.ToObjectString(CommonMarkConverter.Convert(typeParam.Value.ToMarkdown(StepInput.SDProject.Tokens).Transform(helper.TransformLinkToken))) #>" 
			},
		<# } #>	
	],
<# }

if(Documentation.SeeAlsos.Count > 0) { #> 
	seeAlsos: [
		<# foreach(var sdToken in Documentation.SeeAlsos) 
		{ 
			var seeAlso = (SDSeeToken)sdToken;
			if(!string.IsNullOrEmpty(seeAlso.DeclaringType))
			{
				var identifier = string.Format("{0}.{1}", seeAlso.DeclaringType, seeAlso.Name); #>
				{
					type: "",
					id: "<#= identifier #>",
					name: "<#= seeAlso.Name #>"
				},
			<# }
			else
			{
				var identifier = string.Format("{0}.{1}", seeAlso.Namespace, seeAlso.Name); #>
				{
					type: "",
					id: "<#= identifier #>",
					name: "<#= seeAlso.Name #>"
				},
			<# } 
		} #>
	],
<# } #>

<#+	public SDDocumentation Documentation { get; set; } #>
<#@ template language="C#" #>
<#@ assembly name="System.Core" #>

<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Net" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SharpDox.Model" #>
<#@ import namespace="SharpDox.Model.Documentation.Token" #>
<#@ import namespace="SharpDox.Model.Documentation.Article" #>
<#@ import namespace="SharpDox.Plugins.Html.Steps" #>
<#@ import namespace="SharpDox.UML" #>
<#@ import namespace="CommonMark" #>

<# var helper = new Helper(StepInput.SDProject); #>

var sharpDox = sharpDox || {};

sharpDox.typeData = {
	<# foreach(var sdSolution in StepInput.SDProject.Solutions)
	{
		foreach(var sdTargetTypeDic in sdSolution.Value.GetAllTypes())
		{ #>
			
			"<#= sdTargetTypeDic.Key #>": {
			
			<# foreach(var sdTargetType in sdTargetTypeDic.Value)
            {
				var sdType = sdTargetType.Value;
				var targetFx = sdTargetType.Key; #>
				
				"<#= targetFx.Name #>": {
					name: "<#= sdType.Name #>",
					shortIdentifier: "<#= sdType.ShortIdentifier#>",
					namespace: "<#= sdType.Namespace.Fullname #>",
					syntax: "<#= sdType.Syntax #>",
					hasClassDiagram: <#= sdTargetType.Value.IsClassDiagramEmpty() ? "false" : "true" #>,
					baseTypes: [
						<# foreach(var baseType in sdType.BaseTypes) { #>
							{
							<# if(!baseType.IsProjectStranger) { #>
								id: "<#= baseType.Identifier #>",	
							<# } #>
								name: "<#= baseType.Fullname #>"	
							}
						<# } #>
					],
					implements: [
						<# foreach(var implementedInterface in sdType.ImplementedInterfaces) { #>
							{
							<# if(!implementedInterface.IsProjectStranger) { #>
								id: "<#= implementedInterface.Identifier #>",	
							<# } #>
								name: "<#= implementedInterface.Fullname #>"	
							}
						<# } #>	
					],
					<# var documentation = sdType.Documentations.GetElementOrDefault(StepInput.CurrentLanguage);
					if(documentation != null){
						var documentationTemplate = new DocumentationData { Documentation = documentation }; #>
						<#= documentationTemplate.TransformText() #>	
					<# } 

					var fieldsTemplate = new MemberData { MemberTitle = "fields", MemberType = "field", Members = sdType.Fields }; #>
					<#= fieldsTemplate.TransformText() #>

					<# var constructorsTemplate = new MemberData { MemberTitle = "constructors", MemberType = "method", Members = sdType.Constructors }; #>
					<#= constructorsTemplate.TransformText() #>

					<# var methodsTemplate = new MemberData { MemberTitle = "methods", MemberType = "method", Members = sdType.Methods }; #>
					<#= methodsTemplate.TransformText() #>

					<# var eventsTemplate = new MemberData { MemberTitle = "events", MemberType = "event", Members = sdType.Events }; #>
					<#= eventsTemplate.TransformText() #>

					<# var propertiesTemplate = new MemberData { MemberTitle = "properties", MemberType = "property", Members = sdType.Properties }; #>
					<#= propertiesTemplate.TransformText() #>

				},
			},
			<# }
		}
	} #>
};
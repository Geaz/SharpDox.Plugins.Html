<#@ template language="C#" #>
<#@ assembly name="System.Core" #>

<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Net" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SharpDox.Sdk" #>
<#@ import namespace="SharpDox.UML" #>
<#@ import namespace="SharpDox.Model.Repository" #>
<#@ import namespace="SharpDox.Plugins.Html.Steps" #>
<#@ import namespace="SharpDox.Model.Documentation.Token" #>
<#@ import namespace="MarkdownSharp" #>

<!doctype html>
<html>
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
        <title><#= StepInput.SDProject.ProjectName #> - <#= SDType.Name #></title>
        <meta name="viewport" content="width=device-width">

		<# #if DEBUG #>
			<link rel="stylesheet" type="text/css" href="../assets/css/reset.css" />
			<link rel="stylesheet" type="text/css" href="../assets/css/font.css" />
			<link rel="stylesheet" type="text/css" href="../assets/css/font-awesome.css" />
			<link rel="stylesheet" type="text/css" href="../assets/css/typography.css" />		
			<link rel="stylesheet" type="text/css" href="../assets/css/markdown.css" />			
			<link rel="stylesheet" type="text/css" href="../assets/css/tree.css" />
			<link rel="stylesheet" type="text/css" href="../assets/css/dropdown.css" />
			<link rel="stylesheet" type="text/css" href="../assets/css/layout.css" />
			<link rel="stylesheet" type="text/css" href="../assets/css/vs.css" />

			<script src="../assets/js/vendor/jquery.min.js"></script>
			<script src="../assets/js/vendor/jquery-ui.custom.min.js"></script>	
			<script src="../assets/js/vendor/jquery.dropdown.min.js"></script>
			<script src="../assets/js/vendor/jquery.layout.min.js"></script>
			<script src="../assets/js/vendor/jquery.mousewheel.min.js"></script>				
			<script src="../assets/js/vendor/jquery.hashchange.min.js"></script>			
			<script src="../assets/js/vendor/jquery.print.js"></script>

			<![if !IE 8]>
				<script src="../assets/js/vendor/jquery.panzoom.js"></script>	
				<script src="../assets/js/vendor/modernizr.js"></script>
				<script src="../assets/js/vendor/highlight.pack.js"></script>
				<script src="../assets/js/vendor/rgbcolor.js"></script>
				<script src="../assets/js/vendor/StackBlur.js"></script>
				<script src="../assets/js/vendor/canvg.js"></script>
			<![endif]>

			<script src="../assets/js/frame/svg.js"></script>
			<script src="../assets/js/frame/iframe.js"></script>
		<# #else #>
			<link rel="stylesheet" type="text/css" href="../assets/css/font.css?version=<#= FileVersionInfo.GetVersionInfo(Assembly.GetAssembly(typeof(HtmlExporter)).Location).FileVersion #>" />
			<link rel="stylesheet" type="text/css" href="../assets/css/font-awesome.css?version=<#= FileVersionInfo.GetVersionInfo(Assembly.GetAssembly(typeof(HtmlExporter)).Location).FileVersion #>" />
			<link rel="stylesheet" type="text/css" href="../assets/css/style.css?version=<#= FileVersionInfo.GetVersionInfo(Assembly.GetAssembly(typeof(HtmlExporter)).Location).FileVersion #>" />
			
			<!--[if IE 8]>
				<script src="../assets/js/vendor.ie8.js?version=<#= FileVersionInfo.GetVersionInfo(Assembly.GetAssembly(typeof(HtmlExporter)).Location).FileVersion #>"></script>
			<![endif]-->
			<![if !IE 8]>
				<script src="../assets/js/vendor.js?version=<#= FileVersionInfo.GetVersionInfo(Assembly.GetAssembly(typeof(HtmlExporter)).Location).FileVersion #>"></script>
			<![endif]>

			<script src="../assets/js/frame.js?version=<#= FileVersionInfo.GetVersionInfo(Assembly.GetAssembly(typeof(HtmlExporter)).Location).FileVersion #>"></script>
		<# #endif #>

		<script>hljs.initHighlightingOnLoad();</script>

    </head>
    <body>        
        
		<!-- DropDowns -->
		<div id="dropdown-1" class="dropdown dropdown-tip">
			<ul class="dropdown-menu">
				<# foreach(var sdField in SDType.Fields) { #>

					<li><a href="#<#= sdField.ShortIdentifier #>"><img alt="Field-Icon" src="../assets/images/icons/field_<#= sdField.Accessibility #>.png"> <#= sdField.Name #></a></li>

				<# } #>
			</ul>
		</div>

		<div id="dropdown-2" class="dropdown dropdown-tip">
			<ul class="dropdown-menu">
				<# foreach(var sdEvent in SDType.Events) { #>

					<li><a href="#<#= sdEvent.ShortIdentifier #>"><img alt="Event-Icon" src="../assets/images/icons/event_<#= sdEvent.Accessibility #>.png"> <#= sdEvent.Name #></a></li>

				<# } #>
			</ul>
		</div>

		<div id="dropdown-3" class="dropdown dropdown-tip">
			<ul class="dropdown-menu">
				<# foreach(var sdConstructor in SDType.Constructors) {  #>

					<li><a href="#<#= sdConstructor.ShortIdentifier #>"><img alt="Method-Icon" src="../assets/images/icons/method_<#= sdConstructor.Accessibility #>.png"> <#= sdConstructor.Signature #></a></li>

				<# } #>

				<# foreach(var sdMethod in SDType.Methods) {  #>

					<li><a href="#<#= sdMethod.ShortIdentifier #>"><img alt="Method-Icon" src="../assets/images/icons/method_<#= sdMethod.Accessibility #>.png"> <#= sdMethod.Signature #></a></li>

				<# } #>
			</ul>
		</div>

		<div id="dropdown-4" class="dropdown dropdown-tip">
			<ul class="dropdown-menu">
				<# foreach(var sdProperty in SDType.Properties) { #>

					<li><a href="#<#= sdProperty.ShortIdentifier #>"><img alt="Property-Icon" src="../assets/images/icons/properties_<#= sdProperty.Accessibility #>.png"> <#= sdProperty.Name #></a></li>

				<# } #>
			</ul>
		</div>
		<!-- DropDowns Ende -->

	    <div class="ui-layout-north">
			<div class="toolbar">

				<# if(SDType.Fields.Count > 0) { #>
					<a href="#" data-dropdown="#dropdown-1" class="button"><img src="../assets/images/icons/field_public.png"/> <#= StepInput.DocStrings.Fields #> <span class="info">(<#= SDType.Fields.Count #>)</span> <i class="icon-caret-down"></i></a>
				<# } if(SDType.Events.Count > 0) { #>
					<a href="#" data-dropdown="#dropdown-2" class="button"><img src="../assets/images/icons/class_public.png"/> <#= StepInput.DocStrings.Events #> <span class="info">(<#= SDType.Events.Count #>)</span> <i class="icon-caret-down"></i></a>
				<# } if(SDType.Methods.Count > 0 || SDType.Constructors.Count > 0) { #>
					<a href="#" data-dropdown="#dropdown-3" class="button"><img src="../assets/images/icons/method_public.png"/> <#= StepInput.DocStrings.Methods #> <span class="info">(<#= SDType.Constructors.Count + SDType.Methods.Count #>)</span> <i class="icon-caret-down"></i></a>
				<# } if(SDType.Properties.Count > 0) { #>
					<a href="#" data-dropdown="#dropdown-4" class="button"><img src="../assets/images/icons/properties_public.png"/> <#= StepInput.DocStrings.Properties #> <span class="info">(<#= SDType.Properties.Count #>)</span> <i class="icon-caret-down"></i></a>
				<# } #>

				<div class="right">
					<span class="toolbar-info"> Namespace: <#= SDType.Namespace.Fullname #></span>
					<a href="#" id="expand-all-button" class="button"><i class="icon-align-justify" title="<#= StepInput.DocStrings.ExpandAll #>"></i></a>
					<a href="#" id="print-button" class="button"><i class="icon-print" title="<#= StepInput.DocStrings.Print #>"></i></a>
				</div>
				<div style="clear:both;"></div>
			</div>
		</div>
        
		<div class="ui-layout-center">

			<div>
				<h3 class="box-title first-heading"><#= StepInput.DocStrings.Syntax #></h3>					
				<div class="syntax-box">
					<pre class="wrap-pre"><code><#= WebUtility.HtmlEncode(SDType.Syntax) #></code></pre>
				</div>

				<# if(SDType.BaseTypes.Count > 0) { #>
					<h3 class="box-title"><#= StepInput.DocStrings.BaseType #></h3>
					<div class="list-box">
						<ul>
						<# foreach(var baseType in SDType.BaseTypes) { 
							if(baseType.IsProjectStranger) { #>
								<li><#= baseType.Fullname #></a></li>
							<# } else { #>
								<li><a href="../type/<#= baseType.ShortIdentifier #>.html"><#= baseType.Fullname #></a></li>
							<# } #>
						<# } #>
						</ul>
					</div>
				<# } #>

				<# if(SDType.ImplementedInterfaces.Count > 0) { #>
					<h3 class="box-title"><#= StepInput.DocStrings.Implements #></h3>
					<div class="list-box">
						<ul>
						<# foreach(var implementedInterface in SDType.ImplementedInterfaces) {
							if(implementedInterface.IsProjectStranger) { #>
								<li><#= implementedInterface.Fullname #></a></li>
							<# } else { #>
								<li><a href="../type/<#= implementedInterface.ShortIdentifier #>.html"><#= implementedInterface.Fullname #></a></li>
							<# } #>
						<# } #>
						</ul>
					</div>
				<# } #>
        
				<# var documentation = SDType.Documentations.GetElementOrDefault(StepInput.CurrentLanguage);
				if(documentation != null) { #>

					<# if(documentation.Summary.Count > 0) { #>
						<h3 class="box-title"><#= StepInput.DocStrings.Summary #></h3>
						<div class="doc-box markdown">
							<#= new Markdown().Transform(documentation.Summary.ToMarkdown()) #>
						</div>
					<# } #>

					<# if(documentation.Remarks.Count > 0) { #>
						<h3 class="box-title"><#= StepInput.DocStrings.Remarks #></h3>
						<div class="doc-box markdown">
							<#= new Markdown().Transform(documentation.Remarks.ToMarkdown()) #>
						</div>
					<# } #>

					<# if(documentation.Example.Count > 0) { #>
						<h3 class="box-title"><#= StepInput.DocStrings.Example #></h3>
						<div class="doc-box markdown">
							<#= new Markdown().Transform(documentation.Example.ToMarkdown()) #>
						</div>
					<# } #>

					<# if(documentation.Returns.Count > 0) { #>
						<h3 class="box-title"><#= StepInput.DocStrings.Returns #></h3>
						<div class="doc-box markdown">
							<#= new Markdown().Transform(documentation.Returns.ToMarkdown()) #>
						</div>
					<# } #>

					<# if(documentation.Exceptions.Count > 0) { #>
						<h3 class="box-title"><#= StepInput.DocStrings.Exceptions #></h3>
						<div class="doc-box markdown">
							<# foreach(var exception in documentation.Exceptions) { #>
								<p><#= exception.Key #></p>
								<div class="inline">
									<#= new Markdown().Transform(exception.Value.ToMarkdown()) #>
								</div>
							<# } #>
						</div>
					<# } #>

					<# if(documentation.Params.Count > 0) { #>
						<h3 class="box-title"><#= StepInput.DocStrings.Parameters #></h3>
						<div class="doc-box markdown">
							<# foreach(var parameter in documentation.Params) { #>
								<p><#= parameter.Key #></p>
								<div class="inline">
									<#= new Markdown().Transform(parameter.Value.ToMarkdown()) #>
								</div>
							<# } #>
						</div>
					<# } #>

					<# if(documentation.TypeParams.Count > 0) { #>
						<h3 class="box-title"><#= StepInput.DocStrings.TypeParameters #></h3>
						<div class="doc-box markdown">
							<# foreach(var typeParameter in documentation.TypeParams) { #>
								<p><#= typeParameter.Key #></p>
								<div class="inline">
									<#= new Markdown().Transform(typeParameter.Value.ToMarkdown()) #>
								</div>
							<# } #>
						</div>
					<# } #>

					<# if(documentation.SeeAlsos.Count > 0) { #>
						<h3 class="box-title"><#= StepInput.DocStrings.SeeAlso #></h3>
						<div class="list-box">
							<ul>
							<# foreach(var sdToken in documentation.SeeAlsos) 
							{ 
								var seeAlso = (SDSeeToken)sdToken;
								if(!string.IsNullOrEmpty(seeAlso.DeclaringType))
								{
									var identifier = string.Format("{0}.{1}", seeAlso.DeclaringType, seeAlso.Name);
									var sdMember = StepInput.SDProject.GetMemberByIdentifier(identifier);
									if(sdMember != null)
									{
										#> <li><a href="../type/<#= sdMember.DeclaringType.ShortIdentifier #>.html#<#= sdMember.ShortIdentifier #>"><#= sdMember.Name #></a></li> <#
									}
								}
								else
								{
									var identifier = string.Format("{0}.{1}", seeAlso.Namespace, seeAlso.Name);
									var sdType = StepInput.SDProject.GetTypeByIdentifier(identifier);
									if(sdType != null)
									{
										#> <li><a href="../type/<#= sdType.ShortIdentifier #>.html"><#= sdType.Fullname #></a></li> <#
									}
								} 
							} #>
							</ul>
						</div>
					<# } #>

				<# } #>

				<# if(SDType.Uses.Count > 0) { #>
					<h3 class="box-title"><#= StepInput.DocStrings.Uses #></h3>
					<div class="list-box">
						<ul>
						<# foreach(var use in SDType.Uses) { #>
							<li><a href="../type/<#= use.ShortIdentifier #>.html"><#= use.Name #></a></li>
						<# } #>
						</ul>
					</div>
				<# } #>

				<# if(SDType.UsedBy.Count > 0) { #>
					<h3 class="box-title"><#= StepInput.DocStrings.UsedBy #></h3>
					<div class="list-box">
						<ul>
						<# foreach(var used in SDType.UsedBy) { #>
							<li><a href="../type/<#= used.ShortIdentifier #>.html"><#= used.Name #></a></li>
						<# } #>
						</ul>
					</div>
				<# } #>

				<# if(SDType.Fields.Count > 0) { #>
					<h3 class="box-title"><#= StepInput.DocStrings.Fields #></h3>
					<# foreach (var field in SDType.Fields)
					{
						var memberTemplate = new MemberTemplate { SDMember = field }; #>
						<#= memberTemplate.TransformText() #>
					<# } #>
				<# } #>

				<# if(SDType.Events.Count > 0) { #>
					<h3 class="box-title"><#= StepInput.DocStrings.Events #></h3>
					<# foreach (var eve in SDType.Events)
					{
						var memberTemplate = new MemberTemplate { SDMember = eve }; #>
						<#= memberTemplate.TransformText() #>
					<# } #>
				<# } #>

				<# if(SDType.Methods.Count > 0 || SDType.Constructors.Count > 0) { #>
					<h3 class="box-title"><#= StepInput.DocStrings.Methods #></h3>
					<# foreach (var constructor in SDType.Constructors)
					{
						var memberTemplate = new MemberTemplate { SDMember = constructor }; #>
						<#= memberTemplate.TransformText() #>
					<# } foreach (var method in SDType.Methods)
					{
						var memberTemplate = new MemberTemplate { SDMember = method }; #>
						<#= memberTemplate.TransformText() #>
					<#  } #>
				<# } #>

				<# if(SDType.Properties.Count > 0) { #>
					<h3 class="box-title"><#= StepInput.DocStrings.Properties #></h3>
					<# foreach (var property in SDType.Properties)
					{
						var memberTemplate = new MemberTemplate { SDMember = property }; #>
						<#= memberTemplate.TransformText() #>
					<# } #>
				<# } #>

				<#	if(!SDType.IsClassDiagramEmpty()) {  #>
					<div class="svg-diagram">
						<h3 class="box-title"><#= StepInput.DocStrings.ClassDiagram #></h3>
						<div id="sd-class-diagram" class="svgpan">
							<#	var svg = SDType.GetClassDiagram().ToSvg();
								var helper = new Helper(StepInput.SDProject); #>
							<#= svg.Transform(helper.TransformLinkToken) #>
						</div>
						<div class="legend">
							<p class="save"><a href="#"><i class="icon-save"></i><#= StepInput.DocStrings.Save #></a></p>
							<p class="resetZoom"><a href="#"><i class="icon-refresh"></i><#= StepInput.DocStrings.Reset #></a></p>
							<p><#= StepInput.DocStrings.PanZoom #></p>
						</div>
					</div>
				<# } #>
			</div>
		</div>

    </body>
</html>

<#+ public SDType SDType { get; set; } #>
<#@ template language="C#" #>
<#@ assembly name="System.Core" #>

<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Net" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SharpDox.Model" #>
<#@ import namespace="SharpDox.Model.Repository" #>
<#@ import namespace="SharpDox.Model.Documentation.Token" #>
<#@ import namespace="SharpDox.Model.Documentation.Article" #>
<#@ import namespace="SharpDox.Plugins.Html.Steps" #>
<#@ import namespace="SharpDox.UML" #>
<#@ import namespace="CommonMark" #>

"<#= TargetFx.Name #>": { 
		<#
		var properties = new List<string>();
		properties.Add($"\"name\": \"{Type.Name}\"");
		properties.Add($"\"namespace\": \"{Type.Namespace.Fullname}\"");
		properties.Add($"\"syntax\": \"{Type.Syntax}\"");
		properties.Add($"\"linkedSyntax\": \"{Type.SyntaxTemplate.Transform(Helper.TransformLinkToken).ToObjectString()}\"");

		if(!Type.IsClassDiagramEmpty()) { 
			var height = Type.GetClassDiagram().GetSvgSize().Height;
			height = height > 300 ? 375 : height + 75;

			properties.Add($"\"classDiagram\": \"{Type.GetClassDiagram().ToSvg().Transform(Helper.TransformLinkToken).ToObjectString()}\"");
			properties.Add($"\"classDiagramHeight\": \"{height}\"");
			properties.Add($"\"fit\": \"{height == 375}\"");
		}
		if(Type.BaseTypes.Count > 0) {
			var baseTypes = string.Join(",", Type.BaseTypes.Select(baseType => 
				string.Format("{{\"id\": \"{0}\",\"name\": \"{1}\"}}", baseType.Type.Identifier, baseType.Type.Fullname)));

			properties.Add($"\"baseTypes\": [ {baseTypes} ]");
		} 
		if(Type.ImplementedInterfaces.Count > 0) {
			var implements = string.Join(",", Type.ImplementedInterfaces.Select(implementedInterface => 
				string.Format("{{\"id\": \"{0}\",\"name\": \"{1}\"}}", implementedInterface.Type.Identifier, implementedInterface.Type.Fullname)));

			properties.Add($"\"implements\": [ {implements} ]");
		}

		if(Type.Regions.Count > 0){
			var allRegions = new List<string>();
			foreach(var region in Type.Regions){
				allRegions.Add($"{{\"start\": \"{region.StartLine}\", \"end\": \"{region.EndLine}\", \"filepath\": \"{region.FilePath.ToObjectString()}\", \"filename\": \"{region.Filename.ToObjectString()}\", \"content\": \"{region.Content.ToObjectString().Replace("\t", "    ")}\"}}");
			}
			properties.Add($"\"regions\": [{string.Join(",", allRegions)}]");
		}		

		var documentation = Type.Documentations.GetElementOrDefault(StepInput.CurrentLanguage);
		if(documentation != null){
			var documentationTemplate = new DocumentationData { Documentation = documentation };
			var documentationText = documentationTemplate.TransformText();
			if(!string.IsNullOrWhiteSpace(documentationText)) properties.Add(documentationText);
		}
		
		if(Type.Fields.Count > 0) {
			properties.Add(string.Format("\"fields\": [{0}]", string.Join(",", Type.Fields.Select(sdField => new MemberData { Member = sdField, MemberType = "field", Repository = Repository }.TransformText()))));
		} 
		if(Type.Constructors.Count > 0) {
			properties.Add(string.Format("\"constructors\": [{0}]", string.Join(",", Type.Constructors.Select(sdContructor => new MemberData { Member = sdContructor, MemberType = "method", Repository = Repository }.TransformText()))));
		}
		if(Type.Methods.Count > 0) {
			properties.Add(string.Format("\"methods\": [{0}]", string.Join(",", Type.Methods.Select(sdMethod => new MemberData { Member = sdMethod, MemberType = "method", Repository = Repository }.TransformText()))));
		}
		if(Type.Events.Count > 0) {
			properties.Add(string.Format("\"events\": [{0}]", string.Join(",", Type.Events.Select(sdEvent => new MemberData { Member = sdEvent, MemberType = "event", Repository = Repository }.TransformText()))));
		}
		if(Type.Properties.Count > 0){
			properties.Add(string.Format("\"properties\": [{0}]", string.Join(",", Type.Properties.Select(sdProperty => new MemberData { Member = sdProperty, MemberType = "property", Repository = Repository }.TransformText()))));	
		} #>

		<#= string.Join(",", properties) #>	
	}

<#+	
public SDType Type { get; set; }
public SDTargetFx TargetFx { get; set; }
public SDRepository Repository { get; set; } 
#>
<#@ template language="C#" #>
<#@ assembly name="System.Core" #>

<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Net" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SharpDox.Model" #>
<#@ import namespace="SharpDox.Model.Repository" #>
<#@ import namespace="SharpDox.Model.Documentation.Article" #>
<#@ import namespace="SharpDox.Plugins.Html.Steps" #>
<#@ import namespace="CommonMark" #>

<# var helper = new Helper(StepInput.SDProject); #>

"<#= TargetFx.Name #>": {
		"name": "<#= Namespace.Fullname #>",
		"assembly": "<#= Namespace.Assemblyname #>",
		"description": "<#= Namespace.Descriptions.GetElementOrDefault(StepInput.CurrentLanguage) != null ?
						CommonMarkConverter.Convert(Namespace.Descriptions.GetElementOrDefault(StepInput.CurrentLanguage).Transform(helper.TransformLinkToken)).ToObjectString()
						: string.Empty #>", 
		<# if(Namespace.UsedBy.Count > 0) { #>
		"usedBy": [
			<#= string.Join(",", Namespace.UsedBy.Select(usedBy => 
				string.Format("{{\"id\": \"{0}\",\"name\": \"{1}\"}}", usedBy.Identifier, usedBy.Fullname))) #>
		],
		<# } if(Namespace.Uses.Count > 0) { #>
		"uses": [
			<#= string.Join(",", Namespace.Uses.Select(use => 
				string.Format("{{\"id\": \"{0}\",\"name\": \"{1}\"}}", use.Identifier, use.Fullname))) #>
		], 
		<# } #>
		"types":[
			<# var types = new List<string>();
			foreach(var sdType in Namespace.Types){
				var documentation = sdType.Documentations.GetElementOrDefault(StepInput.CurrentLanguage);
				var docString = documentation != null ? 
								CommonMarkConverter.Convert(documentation.Summary.ToMarkdown(StepInput.SDProject.Tokens).Transform(helper.TransformLinkToken)).ToObjectString() :
								string.Empty;
				types.Add(string.Format("{{\"id\":\"{0}\",\"kind\":\"{1}\",\"accessibility\":\"{2}\",\"name\":\"{3}\",\"summary\":\"{4}\"}}",
							sdType.Identifier.RemoveIllegalPathChars(), sdType.Kind, sdType.Accessibility, sdType.Name, docString));
			} #>
			<#= string.Join(",", types) #>
		]
	}

<#+	
public SDNamespace Namespace { get; set; }
public SDTargetFx TargetFx { get; set; } 
#>
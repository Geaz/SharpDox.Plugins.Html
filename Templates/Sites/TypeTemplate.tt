<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Net" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SharpDox.Model.Repository" #>
<#@ import namespace="SharpDox.Model.Documentation.Token" #>
<#@ import namespace="SharpDox.Sdk.Config" #>
<#@ import namespace="SharpDox.Sdk" #>
<#@ import namespace="SharpDox.UML" #>
<#@ import namespace="MarkdownSharp" #>
<#@ import namespace="SharpDox.Plugins.Html.Templates.Strings" #> 

<html>
<!--[if lt IE 7]>      <html class="no-js lt-ie9 lt-ie8 lt-ie7"> <![endif]-->
<!--[if IE 7]>         <html class="no-js lt-ie9 lt-ie8"> <![endif]-->
<!--[if IE 8]>         <html class="no-js lt-ie9"> <![endif]-->
<!--[if gt IE 8]><!--> <html class="no-js"> <!--<![endif]-->
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
        <title><#= Repository.ProjectInfo.ProjectName #> - <#= SDType.Name #></title>
        <meta name="viewport" content="width=device-width">

		<# #if DEBUG #>
			<link rel="stylesheet" type="text/css" href="../assets/css/0-reset.css" />
			<link rel="stylesheet" type="text/css" href="../assets/css/1-font.css" />
			<link rel="stylesheet" type="text/css" href="../assets/css/1-font-awesome.css" />
			<link rel="stylesheet" type="text/css" href="../assets/css/2-typography.css" />		
			<link rel="stylesheet" type="text/css" href="../assets/css/3-markdown.css" />			
			<link rel="stylesheet" type="text/css" href="../assets/css/3-tree.css" />
			<link rel="stylesheet" type="text/css" href="../assets/css/3-dropdown.css" />
			<link rel="stylesheet" type="text/css" href="../assets/css/layout.css" />
		
			<script src="../assets/js/vendor/0-jquery.js"></script>
			<script src="../assets/js/vendor/1-jquery-ui.custom.min.js"></script>	
			<script src="../assets/js/vendor/1-jquery.dropdown.min.js"></script>
			<script src="../assets/js/vendor/1-jquery.layout.min.js"></script>
			<script src="../assets/js/vendor/1-jquery.mousewheel.js"></script>
			<script src="../assets/js/vendor/1-jquery.panzoom.min.js"></script>		
			<script src="../assets/js/vendor/1-jquery.hashchange.min.js"></script>			
			<script src="../assets/js/vendor/2-jquery.print.js"></script>

			<script src="../assets/js/frame/SVGPan.js"></script>
			<script src="../assets/js/frame/iframe.js"></script>
		<# #else #>
			<link rel="stylesheet" type="text/css" href="../assets/css/style.css" />
			<script src="../assets/js/vendor.js"></script>
			<script src="../assets/js/frame.js"></script>
		<# #endif #>

    </head>
    <body>        
        
		<!-- DropDowns -->
		<div id="dropdown-1" class="dropdown dropdown-tip">
			<ul class="dropdown-menu">
				<# foreach(var sdField in SDType.Fields) { #>

					<li><a href="#<#= sdField.ShortIdentifier #>"><img alt="Field-Icon" src="../assets/images/icons/Field_<#= sdField.Accessibility #>.png"> <#= sdField.Name #></a></li>

				<# } #>
			</ul>
		</div>

		<div id="dropdown-2" class="dropdown dropdown-tip">
			<ul class="dropdown-menu">
				<# foreach(var sdEvent in SDType.Events) { #>

					<li><a href="#<#= sdEvent.ShortIdentifier #>"><img alt="Event-Icon" src="../assets/images/icons/Event_<#= sdEvent.Accessibility #>.png"> <#= sdEvent.Name #></a></li>

				<# } #>
			</ul>
		</div>

		<div id="dropdown-3" class="dropdown dropdown-tip">
			<ul class="dropdown-menu">
				<# foreach(var sdConstructor in SDType.Constructors) {  #>

					<li><a href="#<#= sdConstructor.ShortIdentifier #>"><img alt="Method-Icon" src="../assets/images/icons/Method_<#= sdConstructor.Accessibility #>.png"> <#= sdConstructor.Name #></a></li>

				<# } #>

				<# foreach(var sdMethod in SDType.Methods) {  #>

					<li><a href="#<#= sdMethod.ShortIdentifier #>"><img alt="Method-Icon" src="../assets/images/icons/Method_<#= sdMethod.Accessibility #>.png"> <#= sdMethod.Signature #></a></li>

				<# } #>
			</ul>
		</div>

		<div id="dropdown-4" class="dropdown dropdown-tip">
			<ul class="dropdown-menu">
				<# foreach(var sdProperty in SDType.Properties) { #>

					<li><a href="#<#= sdProperty.ShortIdentifier #>"><img alt="Property-Icon" src="../assets/images/icons/Properties_<#= sdProperty.Accessibility #>.png"> <#= sdProperty.Name #></a></li>

				<# } #>
			</ul>
		</div>
		<!-- DropDowns Ende -->

	    <div class="ui-layout-north">
			<div class="toolbar">

				<# if(SDType.Fields.Count > 0) { #>
					<a href="#" data-dropdown="#dropdown-1" class="button"><img src="../assets/images/icons/Field_public.png"/> <#= Strings.Fields #> <span class="info">(<#= SDType.Fields.Count #>)</span> <i class="icon-caret-down"></i></a>
				<# } if(SDType.Events.Count > 0) { #>
					<a href="#" data-dropdown="#dropdown-2" class="button"><img src="../assets/images/icons/Class_public.png"/> <#= Strings.Events #> <span class="info">(<#= SDType.Events.Count #>)</span> <i class="icon-caret-down"></i></a>
				<# } if(SDType.Methods.Count > 0 || SDType.Constructors.Count > 0) { #>
					<a href="#" data-dropdown="#dropdown-3" class="button"><img src="../assets/images/icons/Method_public.png"/> <#= Strings.Methods #> <span class="info">(<#= SDType.Constructors.Count + SDType.Methods.Count #>)</span> <i class="icon-caret-down"></i></a>
				<# } if(SDType.Properties.Count > 0) { #>
					<a href="#" data-dropdown="#dropdown-4" class="button"><img src="../assets/images/icons/Properties_public.png"/> <#= Strings.Properties #> <span class="info">(<#= SDType.Properties.Count #>)</span> <i class="icon-caret-down"></i></a>
				<# } #>

				<div class="right">
					<span class="toolbar-info"> Namespace: <#= SDType.Namespace.Fullname #></span>
					<a href="#" id="expand-all-button" class="button"><i class="icon-align-justify" title="<#= Strings.ExpandAll #>"></i></a>
					<a href="#" id="print-button" class="button"><i class="icon-print" title="<#= Strings.Print #>"></i></a>
				</div>
			</div>
		</div>
        
		<div class="ui-layout-center">
			
			<h3 class="box-title first-heading"><#= Strings.Syntax #></h3>					
			<div class="syntax-box">
				<pre class="wrap-pre"><code><#= WebUtility.HtmlEncode(SDType.Syntax) #></code></pre>
			</div>

			<# if(SDType.BaseTypes.Count > 0) { #>
				<h3 class="box-title"><#= Strings.BaseType #></h3>
				<div class="list-box">
					<ul>
					<# foreach(var baseType in SDType.BaseTypes) { 
						if(baseType.IsProjectStranger) { #>
							<li><#= baseType.Fullname #></a></li>
						<# } else { #>
							<li><a href="../type/<#= baseType.ShortIdentifier #>.html"><#= baseType.Fullname #></a></li>
						<# } #>
					<# } #>
					</ul>
				</div>
			<# } #>

			<# if(SDType.ImplementedInterfaces.Count > 0) { #>
				<h3 class="box-title"><#= Strings.Implements #></h3>
				<div class="list-box">
					<ul>
					<# foreach(var implementedInterface in SDType.ImplementedInterfaces) {
						if(implementedInterface.IsProjectStranger) { #>
							<li><#= implementedInterface.Fullname #></a></li>
						<# } else { #>
							<li><a href="../type/<#= implementedInterface.ShortIdentifier #>.html"><#= implementedInterface.Fullname #></a></li>
						<# } #>
					<# } #>
					</ul>
				</div>
			<# } #>
        
			<# if(SDType.Documentation.Count > 0) { #>

				<# if(SDType.Documentation[CurrentLanguage].Summary.Count > 0) { #>
					<h3 class="box-title"><#= Strings.Summary #></h3>
					<div class="doc-box markdown">
						<#= new Markdown().Transform(SDType.Documentation[CurrentLanguage].Summary.ToMarkdown()) #>
					</div>
				<# } #>

				<# if(SDType.Documentation[CurrentLanguage].Remarks.Count > 0) { #>
					<h3 class="box-title"><#= Strings.Remarks #></h3>
					<div class="doc-box markdown">
						<#= new Markdown().Transform(SDType.Documentation[CurrentLanguage].Remarks.ToMarkdown()) #>
					</div>
				<# } #>

				<# if(SDType.Documentation[CurrentLanguage].Example.Count > 0) { #>
					<h3 class="box-title"><#= Strings.Example #></h3>
					<div class="doc-box markdown">
						<#= new Markdown().Transform(SDType.Documentation[CurrentLanguage].Example.ToMarkdown()) #>
					</div>
				<# } #>

				<# if(SDType.Documentation[CurrentLanguage].Returns.Count > 0) { #>
					<h3 class="box-title"><#= Strings.Returns #></h3>
					<div class="doc-box markdown">
						<#= new Markdown().Transform(SDType.Documentation[CurrentLanguage].Returns.ToMarkdown()) #>
					</div>
				<# } #>

				<# if(SDType.Documentation[CurrentLanguage].Exceptions.Count > 0) { #>
					<h3 class="box-title"><#= Strings.Exceptions #></h3>
					<div class="doc-box markdown">
						<# foreach(var exception in SDType.Documentation[CurrentLanguage].Exceptions) { #>
							<p><#= exception.Key #></p>
							<div class="inline">
								<#= new Markdown().Transform(exception.Value.ToMarkdown()) #>
							</div>
						<# } #>
					</div>
				<# } #>

				<# if(SDType.Documentation[CurrentLanguage].Params.Count > 0) { #>
					<h3 class="box-title"><#= Strings.Parameters #></h3>
					<div class="doc-box markdown">
						<# foreach(var parameter in SDType.Documentation[CurrentLanguage].Params) { #>
							<p><#= parameter.Key #></p>
							<div class="inline">
								<#= new Markdown().Transform(parameter.Value.ToMarkdown()) #>
							</div>
						<# } #>
					</div>
				<# } #>

				<# if(SDType.Documentation[CurrentLanguage].TypeParams.Count > 0) { #>
					<h3 class="box-title"><#= Strings.TypeParameters #></h3>
					<div class="doc-box markdown">
						<# foreach(var typeParameter in SDType.Documentation[CurrentLanguage].TypeParams) { #>
							<p><#= typeParameter.Key #></p>
							<div class="inline">
								<#= new Markdown().Transform(typeParameter.Value.ToMarkdown()) #>
							</div>
						<# } #>
					</div>
				<# } #>

				<# if(SDType.Documentation[CurrentLanguage].SeeAlsos.Count > 0) { #>
					<h3 class="box-title"><#= Strings.SeeAlso #></h3>
					<div class="list-box">
						<ul>
						<# foreach(var sdToken in SDType.Documentation[CurrentLanguage].SeeAlsos) 
						{ 
							var seeAlso = (SDSeeToken)sdToken;
							if(!string.IsNullOrEmpty(seeAlso.DeclaringType))
							{
								var identifier = string.Format("{0}.{1}", seeAlso.DeclaringType, seeAlso.Name);
								var sdMember = Repository.GetMemberByIdentifier(identifier);
								if(sdMember != null)
                                {
									#> <li><a href="../type/<#= sdMember.DeclaringType.ShortIdentifier #>.html#<#= sdMember.ShortIdentifier #>"><#= sdMember.Name #></a></li> <#
                                }
							}
							else
							{
								var identifier = string.Format("{0}.{1}", seeAlso.Namespace, seeAlso.Name);
								var sdType = Repository.GetTypeByIdentifier(identifier);
								if(sdType != null)
                                {
									#> <li><a href="../type/<#= sdType.ShortIdentifier #>.html"><#= sdType.Fullname #></a></li> <#
                                }
							} 
						} #>
						</ul>
					</div>
				<# } #>

			<# } #>

			<# if(SDType.Uses.Count > 0) { #>
				<h3 class="box-title"><#= Strings.Uses #></h3>
				<div class="list-box">
					<ul>
					<# foreach(var use in SDType.Uses) { #>
						<li><a href="../type/<#= use.ShortIdentifier #>.html"><#= use.Name #></a></li>
					<# } #>
					</ul>
				</div>
			<# } #>

			<# if(SDType.UsedBy.Count > 0) { #>
				<h3 class="box-title"><#= Strings.UsedBy #></h3>
				<div class="list-box">
					<ul>
					<# foreach(var used in SDType.UsedBy) { #>
						<li><a href="../type/<#= used.ShortIdentifier #>.html"><#= used.Name #></a></li>
					<# } #>
					</ul>
				</div>
			<# } #>

			<# if(SDType.Fields.Count > 0) { #>
				<h3 class="box-title"><#= Strings.Fields #></h3>
				<# foreach (var field in SDType.Fields)
				{
					var memberTemplate = new MemberTemplate
					{
						Strings = Strings,
						CurrentLanguage = field.Documentation.ContainsKey(CurrentLanguage) ? CurrentLanguage : "default",
						SDType = SDType,
						SDMember = field,
						Repository = Repository
					}; #>
					<#= memberTemplate.TransformText() #>
				<# } #>
			<# } #>

			<# if(SDType.Events.Count > 0) { #>
				<h3 class="box-title"><#= Strings.Events #></h3>
				<# foreach (var eve in SDType.Events)
				{
					var memberTemplate = new MemberTemplate
					{
						Strings = Strings,
						CurrentLanguage = eve.Documentation.ContainsKey(CurrentLanguage) ? CurrentLanguage : "default",
						SDType = SDType,
						SDMember = eve,
						Repository = Repository
					}; #>
					<#= memberTemplate.TransformText() #>
				<# } #>
			<# } #>

			<# if(SDType.Methods.Count > 0 || SDType.Constructors.Count > 0) { #>
				<h3 class="box-title"><#= Strings.Methods #></h3>
				<# foreach (var constructor in SDType.Constructors)
				{
					var memberTemplate = new MemberTemplate
					{
						Strings = Strings,
						CurrentLanguage = constructor.Documentation.ContainsKey(CurrentLanguage) ? CurrentLanguage : "default",
						SDType = SDType,
						SDMember = constructor,
						Repository = Repository
					}; #>
					<#= memberTemplate.TransformText() #>
				<# } foreach (var method in SDType.Methods)
				{
					var memberTemplate = new MemberTemplate
					{
						Strings = Strings,
						CurrentLanguage = method.Documentation.ContainsKey(CurrentLanguage) ? CurrentLanguage : "default",
						SDType = SDType,
						SDMember = method,
						Repository = Repository
					}; #>
					<#= memberTemplate.TransformText() #>
				<#  } #>
			<# } #>

			<# if(SDType.Properties.Count > 0) { #>
				<h3 class="box-title"><#= Strings.Properties #></h3>
				<# foreach (var property in SDType.Properties)
				{
					var memberTemplate = new MemberTemplate
					{
						Strings = Strings,
						CurrentLanguage = property.Documentation.ContainsKey(CurrentLanguage) ? CurrentLanguage : "default",
						SDType = SDType,
						SDMember = property,
						Repository = Repository
					}; #>
					<#= memberTemplate.TransformText() #>
				<# } #>
			<# } #>

			<h3 class="box-title"><#= Strings.ClassDiagram #></h3>
			<# if(!SDType.IsClassDiagramEmpty()) { #>
				<div id="sd-class-diagram" class="svgpan">
					<#	var svg = SDType.GetClassDiagram().ToSvg(500);
						var template = new Templater(Repository, svg); 
						var helper = new Helper(Repository); #>
					<#= template.TransformText(helper.TransformLinkToken) #>
				</div>
				<div class="legend"><p><#= Strings.PanZoom #></p></div>
			<# } #>

		</div>

    </body>
</html>

<#+ public IStrings Strings { get; set; }
	public string CurrentLanguage { get; set; }
	public SDRepository Repository { get; set; }
    public SDType SDType { get; set; } #>
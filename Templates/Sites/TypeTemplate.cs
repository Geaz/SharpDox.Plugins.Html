// ------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion: 11.0.0.0
//  
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace SharpDox.Plugins.Html.Templates.Sites
{
    using System.Linq;
    using System.Text;
    using System.Net;
    using System.Collections.Generic;
    using SharpDox.Sdk;
    using SharpDox.UML;
    using SharpDox.Model.Repository;
    using SharpDox.Plugins.Html.Steps;
    using SharpDox.Model.Documentation.Token;
    using MarkdownSharp;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public partial class TypeTemplate : TypeTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n");
            this.Write("\r\n");
            
            #line 15 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 var currentLanguage = SDType.Documentation.ContainsKey(StepInput.CurrentLanguage) ? StepInput.CurrentLanguage : "default"; 
            
            #line default
            #line hidden
            this.Write(@"
<html>
<!--[if lt IE 7]>      <html class=""no-js lt-ie9 lt-ie8 lt-ie7""> <![endif]-->
<!--[if IE 7]>         <html class=""no-js lt-ie9 lt-ie8""> <![endif]-->
<!--[if IE 8]>         <html class=""no-js lt-ie9""> <![endif]-->
<!--[if gt IE 8]><!--> <html class=""no-js""> <!--<![endif]-->
    <head>
        <meta charset=""utf-8"">
        <meta http-equiv=""X-UA-Compatible"" content=""IE=edge,chrome=1"">
        <title>");
            
            #line 25 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StepInput.SDProject.ProjectName));
            
            #line default
            #line hidden
            this.Write(" - ");
            
            #line 25 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SDType.Name));
            
            #line default
            #line hidden
            this.Write("</title>\r\n        <meta name=\"viewport\" content=\"width=device-width\">\r\n\r\n\t\t");
            
            #line 28 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 #if DEBUG 
            
            #line default
            #line hidden
            this.Write(@"			<link rel=""stylesheet"" type=""text/css"" href=""../assets/css/0-reset.css"" />
			<link rel=""stylesheet"" type=""text/css"" href=""../assets/css/1-font.css"" />
			<link rel=""stylesheet"" type=""text/css"" href=""../assets/css/1-font-awesome.css"" />
			<link rel=""stylesheet"" type=""text/css"" href=""../assets/css/2-typography.css"" />		
			<link rel=""stylesheet"" type=""text/css"" href=""../assets/css/3-markdown.css"" />			
			<link rel=""stylesheet"" type=""text/css"" href=""../assets/css/3-tree.css"" />
			<link rel=""stylesheet"" type=""text/css"" href=""../assets/css/3-dropdown.css"" />
			<link rel=""stylesheet"" type=""text/css"" href=""../assets/css/layout.css"" />
			<link rel=""stylesheet"" type=""text/css"" href=""../assets/css/vs.css"" />

			<script src=""../assets/js/vendor/0-jquery.js""></script>
			<script src=""../assets/js/vendor/1-jquery-ui.custom.min.js""></script>	
			<script src=""../assets/js/vendor/1-jquery.dropdown.min.js""></script>
			<script src=""../assets/js/vendor/1-jquery.layout.min.js""></script>
			<script src=""../assets/js/vendor/1-jquery.mousewheel.js""></script>
			<script src=""../assets/js/vendor/1-jquery.panzoom.min.js""></script>		
			<script src=""../assets/js/vendor/1-jquery.hashchange.min.js""></script>			
			<script src=""../assets/js/vendor/2-jquery.print.js""></script>
			<script src=""../assets/js/vendor/highlight.pack.js""></script>

			<script src=""../assets/js/frame/SVGPan.js""></script>
			<script src=""../assets/js/frame/iframe.js""></script>
		");
            
            #line 51 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 #else 
            
            #line default
            #line hidden
            this.Write("\t\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"../assets/css/style.css?version=0" +
                    "931\" />\r\n\t\t\t<script src=\"../assets/js/vendor.js?version=0931\"></script>\r\n\t\t\t<scr" +
                    "ipt src=\"../assets/js/frame.js?version=0931\"></script>\r\n\t\t");
            
            #line 55 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 #endif 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t<script>hljs.initHighlightingOnLoad();</script>\r\n\r\n    </head>\r\n    <body>   " +
                    "     \r\n        \r\n\t\t<!-- DropDowns -->\r\n\t\t<div id=\"dropdown-1\" class=\"dropdown dr" +
                    "opdown-tip\">\r\n\t\t\t<ul class=\"dropdown-menu\">\r\n\t\t\t\t");
            
            #line 65 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 foreach(var sdField in SDType.Fields) { 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t<li><a href=\"#");
            
            #line 67 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdField.ShortIdentifier));
            
            #line default
            #line hidden
            this.Write("\"><img alt=\"Field-Icon\" src=\"../assets/images/icons/field_");
            
            #line 67 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdField.Accessibility));
            
            #line default
            #line hidden
            this.Write(".png\"> ");
            
            #line 67 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdField.Name));
            
            #line default
            #line hidden
            this.Write("</a></li>\r\n\r\n\t\t\t\t");
            
            #line 69 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t</ul>\r\n\t\t</div>\r\n\r\n\t\t<div id=\"dropdown-2\" class=\"dropdown dropdown-tip\">\r\n\t\t\t<" +
                    "ul class=\"dropdown-menu\">\r\n\t\t\t\t");
            
            #line 75 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 foreach(var sdEvent in SDType.Events) { 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t<li><a href=\"#");
            
            #line 77 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdEvent.ShortIdentifier));
            
            #line default
            #line hidden
            this.Write("\"><img alt=\"Event-Icon\" src=\"../assets/images/icons/event_");
            
            #line 77 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdEvent.Accessibility));
            
            #line default
            #line hidden
            this.Write(".png\"> ");
            
            #line 77 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdEvent.Name));
            
            #line default
            #line hidden
            this.Write("</a></li>\r\n\r\n\t\t\t\t");
            
            #line 79 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t</ul>\r\n\t\t</div>\r\n\r\n\t\t<div id=\"dropdown-3\" class=\"dropdown dropdown-tip\">\r\n\t\t\t<" +
                    "ul class=\"dropdown-menu\">\r\n\t\t\t\t");
            
            #line 85 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 foreach(var sdConstructor in SDType.Constructors) {  
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t<li><a href=\"#");
            
            #line 87 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdConstructor.ShortIdentifier));
            
            #line default
            #line hidden
            this.Write("\"><img alt=\"Method-Icon\" src=\"../assets/images/icons/method_");
            
            #line 87 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdConstructor.Accessibility));
            
            #line default
            #line hidden
            this.Write(".png\"> ");
            
            #line 87 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdConstructor.Signature));
            
            #line default
            #line hidden
            this.Write("</a></li>\r\n\r\n\t\t\t\t");
            
            #line 89 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t");
            
            #line 91 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 foreach(var sdMethod in SDType.Methods) {  
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t<li><a href=\"#");
            
            #line 93 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdMethod.ShortIdentifier));
            
            #line default
            #line hidden
            this.Write("\"><img alt=\"Method-Icon\" src=\"../assets/images/icons/method_");
            
            #line 93 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdMethod.Accessibility));
            
            #line default
            #line hidden
            this.Write(".png\"> ");
            
            #line 93 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdMethod.Signature));
            
            #line default
            #line hidden
            this.Write("</a></li>\r\n\r\n\t\t\t\t");
            
            #line 95 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t</ul>\r\n\t\t</div>\r\n\r\n\t\t<div id=\"dropdown-4\" class=\"dropdown dropdown-tip\">\r\n\t\t\t<" +
                    "ul class=\"dropdown-menu\">\r\n\t\t\t\t");
            
            #line 101 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 foreach(var sdProperty in SDType.Properties) { 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t<li><a href=\"#");
            
            #line 103 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdProperty.ShortIdentifier));
            
            #line default
            #line hidden
            this.Write("\"><img alt=\"Property-Icon\" src=\"../assets/images/icons/properties_");
            
            #line 103 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdProperty.Accessibility));
            
            #line default
            #line hidden
            this.Write(".png\"> ");
            
            #line 103 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdProperty.Name));
            
            #line default
            #line hidden
            this.Write("</a></li>\r\n\r\n\t\t\t\t");
            
            #line 105 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t</ul>\r\n\t\t</div>\r\n\t\t<!-- DropDowns Ende -->\r\n\r\n\t    <div class=\"ui-layout-north" +
                    "\">\r\n\t\t\t<div class=\"toolbar\">\r\n\r\n\t\t\t\t");
            
            #line 113 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 if(SDType.Fields.Count > 0) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t<a href=\"#\" data-dropdown=\"#dropdown-1\" class=\"button\"><img src=\"../assets/i" +
                    "mages/icons/field_public.png\"/> ");
            
            #line 114 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StepInput.DocStrings.Fields));
            
            #line default
            #line hidden
            this.Write(" <span class=\"info\">(");
            
            #line 114 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SDType.Fields.Count));
            
            #line default
            #line hidden
            this.Write(")</span> <i class=\"icon-caret-down\"></i></a>\r\n\t\t\t\t");
            
            #line 115 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } if(SDType.Events.Count > 0) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t<a href=\"#\" data-dropdown=\"#dropdown-2\" class=\"button\"><img src=\"../assets/i" +
                    "mages/icons/class_public.png\"/> ");
            
            #line 116 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StepInput.DocStrings.Events));
            
            #line default
            #line hidden
            this.Write(" <span class=\"info\">(");
            
            #line 116 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SDType.Events.Count));
            
            #line default
            #line hidden
            this.Write(")</span> <i class=\"icon-caret-down\"></i></a>\r\n\t\t\t\t");
            
            #line 117 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } if(SDType.Methods.Count > 0 || SDType.Constructors.Count > 0) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t<a href=\"#\" data-dropdown=\"#dropdown-3\" class=\"button\"><img src=\"../assets/i" +
                    "mages/icons/method_public.png\"/> ");
            
            #line 118 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StepInput.DocStrings.Methods));
            
            #line default
            #line hidden
            this.Write(" <span class=\"info\">(");
            
            #line 118 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SDType.Constructors.Count + SDType.Methods.Count));
            
            #line default
            #line hidden
            this.Write(")</span> <i class=\"icon-caret-down\"></i></a>\r\n\t\t\t\t");
            
            #line 119 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } if(SDType.Properties.Count > 0) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t<a href=\"#\" data-dropdown=\"#dropdown-4\" class=\"button\"><img src=\"../assets/i" +
                    "mages/icons/properties_public.png\"/> ");
            
            #line 120 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StepInput.DocStrings.Properties));
            
            #line default
            #line hidden
            this.Write(" <span class=\"info\">(");
            
            #line 120 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SDType.Properties.Count));
            
            #line default
            #line hidden
            this.Write(")</span> <i class=\"icon-caret-down\"></i></a>\r\n\t\t\t\t");
            
            #line 121 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t<div class=\"right\">\r\n\t\t\t\t\t<span class=\"toolbar-info\"> Namespace: ");
            
            #line 124 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SDType.Namespace.Fullname));
            
            #line default
            #line hidden
            this.Write("</span>\r\n\t\t\t\t\t<a href=\"#\" id=\"expand-all-button\" class=\"button\"><i class=\"icon-al" +
                    "ign-justify\" title=\"");
            
            #line 125 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StepInput.DocStrings.ExpandAll));
            
            #line default
            #line hidden
            this.Write("\"></i></a>\r\n\t\t\t\t\t<a href=\"#\" id=\"print-button\" class=\"button\"><i class=\"icon-prin" +
                    "t\" title=\"");
            
            #line 126 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StepInput.DocStrings.Print));
            
            #line default
            #line hidden
            this.Write("\"></i></a>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div style=\"clear:both;\"></div>\r\n\t\t\t</div>\r\n\t\t</div>\r" +
                    "\n        \r\n\t\t<div class=\"ui-layout-center\">\r\n\r\n\t\t\t<div>\r\n\t\t\t\t<h3 class=\"box-titl" +
                    "e first-heading\">");
            
            #line 135 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StepInput.DocStrings.Syntax));
            
            #line default
            #line hidden
            this.Write("</h3>\t\t\t\t\t\r\n\t\t\t\t<div class=\"syntax-box\">\r\n\t\t\t\t\t<pre class=\"wrap-pre\"><code>");
            
            #line 137 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WebUtility.HtmlEncode(SDType.Syntax)));
            
            #line default
            #line hidden
            this.Write("</code></pre>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t");
            
            #line 140 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 if(SDType.BaseTypes.Count > 0) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t<h3 class=\"box-title\">");
            
            #line 141 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StepInput.DocStrings.BaseType));
            
            #line default
            #line hidden
            this.Write("</h3>\r\n\t\t\t\t\t<div class=\"list-box\">\r\n\t\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t");
            
            #line 144 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 foreach(var baseType in SDType.BaseTypes) { 
							if(baseType.IsProjectStranger) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t<li>");
            
            #line 146 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(baseType.Fullname));
            
            #line default
            #line hidden
            this.Write("</a></li>\r\n\t\t\t\t\t\t\t");
            
            #line 147 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t<li><a href=\"../type/");
            
            #line 148 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(baseType.ShortIdentifier));
            
            #line default
            #line hidden
            this.Write(".html\">");
            
            #line 148 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(baseType.Fullname));
            
            #line default
            #line hidden
            this.Write("</a></li>\r\n\t\t\t\t\t\t\t");
            
            #line 149 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t");
            
            #line 150 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t");
            
            #line 153 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t");
            
            #line 155 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 if(SDType.ImplementedInterfaces.Count > 0) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t<h3 class=\"box-title\">");
            
            #line 156 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StepInput.DocStrings.Implements));
            
            #line default
            #line hidden
            this.Write("</h3>\r\n\t\t\t\t\t<div class=\"list-box\">\r\n\t\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t");
            
            #line 159 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 foreach(var implementedInterface in SDType.ImplementedInterfaces) {
							if(implementedInterface.IsProjectStranger) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t<li>");
            
            #line 161 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(implementedInterface.Fullname));
            
            #line default
            #line hidden
            this.Write("</a></li>\r\n\t\t\t\t\t\t\t");
            
            #line 162 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t<li><a href=\"../type/");
            
            #line 163 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(implementedInterface.ShortIdentifier));
            
            #line default
            #line hidden
            this.Write(".html\">");
            
            #line 163 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(implementedInterface.Fullname));
            
            #line default
            #line hidden
            this.Write("</a></li>\r\n\t\t\t\t\t\t\t");
            
            #line 164 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t");
            
            #line 165 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t");
            
            #line 168 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("        \r\n\t\t\t\t");
            
            #line 170 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 if(SDType.Documentation.Count > 0) { 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t");
            
            #line 172 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 if(SDType.Documentation[currentLanguage].Summary.Count > 0) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t<h3 class=\"box-title\">");
            
            #line 173 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StepInput.DocStrings.Summary));
            
            #line default
            #line hidden
            this.Write("</h3>\r\n\t\t\t\t\t\t<div class=\"doc-box markdown\">\r\n\t\t\t\t\t\t\t");
            
            #line 175 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(new Markdown().Transform(SDType.Documentation[currentLanguage].Summary.ToMarkdown())));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t");
            
            #line 177 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t");
            
            #line 179 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 if(SDType.Documentation[currentLanguage].Remarks.Count > 0) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t<h3 class=\"box-title\">");
            
            #line 180 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StepInput.DocStrings.Remarks));
            
            #line default
            #line hidden
            this.Write("</h3>\r\n\t\t\t\t\t\t<div class=\"doc-box markdown\">\r\n\t\t\t\t\t\t\t");
            
            #line 182 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(new Markdown().Transform(SDType.Documentation[currentLanguage].Remarks.ToMarkdown())));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t");
            
            #line 184 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t");
            
            #line 186 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 if(SDType.Documentation[currentLanguage].Example.Count > 0) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t<h3 class=\"box-title\">");
            
            #line 187 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StepInput.DocStrings.Example));
            
            #line default
            #line hidden
            this.Write("</h3>\r\n\t\t\t\t\t\t<div class=\"doc-box markdown\">\r\n\t\t\t\t\t\t\t");
            
            #line 189 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(new Markdown().Transform(SDType.Documentation[currentLanguage].Example.ToMarkdown())));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t");
            
            #line 191 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t");
            
            #line 193 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 if(SDType.Documentation[currentLanguage].Returns.Count > 0) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t<h3 class=\"box-title\">");
            
            #line 194 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StepInput.DocStrings.Returns));
            
            #line default
            #line hidden
            this.Write("</h3>\r\n\t\t\t\t\t\t<div class=\"doc-box markdown\">\r\n\t\t\t\t\t\t\t");
            
            #line 196 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(new Markdown().Transform(SDType.Documentation[currentLanguage].Returns.ToMarkdown())));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t");
            
            #line 198 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t");
            
            #line 200 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 if(SDType.Documentation[currentLanguage].Exceptions.Count > 0) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t<h3 class=\"box-title\">");
            
            #line 201 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StepInput.DocStrings.Exceptions));
            
            #line default
            #line hidden
            this.Write("</h3>\r\n\t\t\t\t\t\t<div class=\"doc-box markdown\">\r\n\t\t\t\t\t\t\t");
            
            #line 203 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 foreach(var exception in SDType.Documentation[currentLanguage].Exceptions) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t<p>");
            
            #line 204 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(exception.Key));
            
            #line default
            #line hidden
            this.Write("</p>\r\n\t\t\t\t\t\t\t\t<div class=\"inline\">\r\n\t\t\t\t\t\t\t\t\t");
            
            #line 206 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(new Markdown().Transform(exception.Value.ToMarkdown())));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t");
            
            #line 208 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t</div>\r\n\t\t\t\t\t");
            
            #line 210 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t");
            
            #line 212 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 if(SDType.Documentation[currentLanguage].Params.Count > 0) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t<h3 class=\"box-title\">");
            
            #line 213 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StepInput.DocStrings.Parameters));
            
            #line default
            #line hidden
            this.Write("</h3>\r\n\t\t\t\t\t\t<div class=\"doc-box markdown\">\r\n\t\t\t\t\t\t\t");
            
            #line 215 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 foreach(var parameter in SDType.Documentation[currentLanguage].Params) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t<p>");
            
            #line 216 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Key));
            
            #line default
            #line hidden
            this.Write("</p>\r\n\t\t\t\t\t\t\t\t<div class=\"inline\">\r\n\t\t\t\t\t\t\t\t\t");
            
            #line 218 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(new Markdown().Transform(parameter.Value.ToMarkdown())));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t");
            
            #line 220 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t</div>\r\n\t\t\t\t\t");
            
            #line 222 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t");
            
            #line 224 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 if(SDType.Documentation[currentLanguage].TypeParams.Count > 0) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t<h3 class=\"box-title\">");
            
            #line 225 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StepInput.DocStrings.TypeParameters));
            
            #line default
            #line hidden
            this.Write("</h3>\r\n\t\t\t\t\t\t<div class=\"doc-box markdown\">\r\n\t\t\t\t\t\t\t");
            
            #line 227 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 foreach(var typeParameter in SDType.Documentation[currentLanguage].TypeParams) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t<p>");
            
            #line 228 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(typeParameter.Key));
            
            #line default
            #line hidden
            this.Write("</p>\r\n\t\t\t\t\t\t\t\t<div class=\"inline\">\r\n\t\t\t\t\t\t\t\t\t");
            
            #line 230 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(new Markdown().Transform(typeParameter.Value.ToMarkdown())));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t");
            
            #line 232 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t</div>\r\n\t\t\t\t\t");
            
            #line 234 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t");
            
            #line 236 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 if(SDType.Documentation[currentLanguage].SeeAlsos.Count > 0) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t<h3 class=\"box-title\">");
            
            #line 237 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StepInput.DocStrings.SeeAlso));
            
            #line default
            #line hidden
            this.Write("</h3>\r\n\t\t\t\t\t\t<div class=\"list-box\">\r\n\t\t\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t\t");
            
            #line 240 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 foreach(var sdToken in SDType.Documentation[currentLanguage].SeeAlsos) 
							{ 
								var seeAlso = (SDSeeToken)sdToken;
								if(!string.IsNullOrEmpty(seeAlso.DeclaringType))
								{
									var identifier = string.Format("{0}.{1}", seeAlso.DeclaringType, seeAlso.Name);
									var sdMember = StepInput.SDProject.GetMemberByIdentifier(identifier);
									if(sdMember != null)
									{
										
            
            #line default
            #line hidden
            this.Write(" <li><a href=\"../type/");
            
            #line 249 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdMember.DeclaringType.ShortIdentifier));
            
            #line default
            #line hidden
            this.Write(".html#");
            
            #line 249 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdMember.ShortIdentifier));
            
            #line default
            #line hidden
            this.Write("\">");
            
            #line 249 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdMember.Name));
            
            #line default
            #line hidden
            this.Write("</a></li> ");
            
            #line 249 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"

									}
								}
								else
								{
									var identifier = string.Format("{0}.{1}", seeAlso.Namespace, seeAlso.Name);
									var sdType = StepInput.SDProject.GetTypeByIdentifier(identifier);
									if(sdType != null)
									{
										
            
            #line default
            #line hidden
            this.Write(" <li><a href=\"../type/");
            
            #line 258 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdType.ShortIdentifier));
            
            #line default
            #line hidden
            this.Write(".html\">");
            
            #line 258 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdType.Fullname));
            
            #line default
            #line hidden
            this.Write("</a></li> ");
            
            #line 258 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"

									}
								} 
							} 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t");
            
            #line 264 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t");
            
            #line 266 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t");
            
            #line 268 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 if(SDType.Uses.Count > 0) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t<h3 class=\"box-title\">");
            
            #line 269 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StepInput.DocStrings.Uses));
            
            #line default
            #line hidden
            this.Write("</h3>\r\n\t\t\t\t\t<div class=\"list-box\">\r\n\t\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t");
            
            #line 272 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 foreach(var use in SDType.Uses) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t<li><a href=\"../type/");
            
            #line 273 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(use.ShortIdentifier));
            
            #line default
            #line hidden
            this.Write(".html\">");
            
            #line 273 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(use.Name));
            
            #line default
            #line hidden
            this.Write("</a></li>\r\n\t\t\t\t\t\t");
            
            #line 274 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t");
            
            #line 277 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t");
            
            #line 279 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 if(SDType.UsedBy.Count > 0) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t<h3 class=\"box-title\">");
            
            #line 280 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StepInput.DocStrings.UsedBy));
            
            #line default
            #line hidden
            this.Write("</h3>\r\n\t\t\t\t\t<div class=\"list-box\">\r\n\t\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t");
            
            #line 283 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 foreach(var used in SDType.UsedBy) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t<li><a href=\"../type/");
            
            #line 284 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(used.ShortIdentifier));
            
            #line default
            #line hidden
            this.Write(".html\">");
            
            #line 284 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(used.Name));
            
            #line default
            #line hidden
            this.Write("</a></li>\r\n\t\t\t\t\t\t");
            
            #line 285 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t");
            
            #line 288 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t");
            
            #line 290 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 if(SDType.Fields.Count > 0) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t<h3 class=\"box-title\">");
            
            #line 291 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StepInput.DocStrings.Fields));
            
            #line default
            #line hidden
            this.Write("</h3>\r\n\t\t\t\t\t");
            
            #line 292 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 foreach (var field in SDType.Fields)
					{
						var memberTemplate = new MemberTemplate { SDMember = field }; 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t");
            
            #line 295 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(memberTemplate.TransformText()));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t");
            
            #line 296 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t");
            
            #line 297 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t");
            
            #line 299 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 if(SDType.Events.Count > 0) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t<h3 class=\"box-title\">");
            
            #line 300 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StepInput.DocStrings.Events));
            
            #line default
            #line hidden
            this.Write("</h3>\r\n\t\t\t\t\t");
            
            #line 301 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 foreach (var eve in SDType.Events)
					{
						var memberTemplate = new MemberTemplate { SDMember = eve }; 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t");
            
            #line 304 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(memberTemplate.TransformText()));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t");
            
            #line 305 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t");
            
            #line 306 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t");
            
            #line 308 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 if(SDType.Methods.Count > 0 || SDType.Constructors.Count > 0) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t<h3 class=\"box-title\">");
            
            #line 309 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StepInput.DocStrings.Methods));
            
            #line default
            #line hidden
            this.Write("</h3>\r\n\t\t\t\t\t");
            
            #line 310 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 foreach (var constructor in SDType.Constructors)
					{
						var memberTemplate = new MemberTemplate { SDMember = constructor }; 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t");
            
            #line 313 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(memberTemplate.TransformText()));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t");
            
            #line 314 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } foreach (var method in SDType.Methods)
					{
						var memberTemplate = new MemberTemplate { SDMember = method }; 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t");
            
            #line 317 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(memberTemplate.TransformText()));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t");
            
            #line 318 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
  } 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t");
            
            #line 319 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t");
            
            #line 321 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 if(SDType.Properties.Count > 0) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t<h3 class=\"box-title\">");
            
            #line 322 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StepInput.DocStrings.Properties));
            
            #line default
            #line hidden
            this.Write("</h3>\r\n\t\t\t\t\t");
            
            #line 323 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 foreach (var property in SDType.Properties)
					{
						var memberTemplate = new MemberTemplate { SDMember = property }; 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t");
            
            #line 326 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(memberTemplate.TransformText()));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t");
            
            #line 327 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t");
            
            #line 328 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t");
            
            #line 330 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
	if(!SDType.IsClassDiagramEmpty()) {  
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t<h3 class=\"box-title\">");
            
            #line 331 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StepInput.DocStrings.ClassDiagram));
            
            #line default
            #line hidden
            this.Write("</h3>\r\n\t\t\t\t\t<div id=\"sd-class-diagram\" class=\"svgpan\">\r\n\t\t\t\t\t\t");
            
            #line 333 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
	var svg = SDType.GetClassDiagram().ToSvg();
							var template = new Templater(StepInput.SDProject, svg); 
							var helper = new Helper(StepInput.SDProject); 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t");
            
            #line 336 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(template.TransformText(helper.TransformLinkToken)));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\"legend\"><p>");
            
            #line 338 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(StepInput.DocStrings.PanZoom));
            
            #line default
            #line hidden
            this.Write("</p></div>\r\n\t\t\t\t");
            
            #line 339 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t</div>\r\n\t\t</div>\r\n\r\n    </body>\r\n</html>\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 346 "D:\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 public SDType SDType { get; set; } 
        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public class TypeTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}

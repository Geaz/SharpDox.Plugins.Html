// ------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion: 11.0.0.0
//  
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace SharpDox.Plugins.Html.Templates.Sites
{
    using System.Linq;
    using System.Text;
    using System.Net;
    using System.Collections.Generic;
    using SharpDox.Model.Repository;
    using SharpDox.Model.Documentation.Token;
    using SharpDox.Sdk.Config;
    using SharpDox.Sdk;
    using SharpDox.UML;
    using MarkdownSharp;
    using SharpDox.Plugins.Html.Templates.Strings;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public partial class TypeTemplate : TypeTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@" 

<!DOCTYPE html>
<!--[if lt IE 7]>      <html class=""no-js lt-ie9 lt-ie8 lt-ie7""> <![endif]-->
<!--[if IE 7]>         <html class=""no-js lt-ie9 lt-ie8""> <![endif]-->
<!--[if IE 8]>         <html class=""no-js lt-ie9""> <![endif]-->
<!--[if gt IE 8]><!--> <html class=""no-js""> <!--<![endif]-->
    <head>
        <meta charset=""utf-8"">
        <meta http-equiv=""X-UA-Compatible"" content=""IE=edge,chrome=1"">
        <title>");
            
            #line 23 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Repository.ProjectInfo.ProjectName));
            
            #line default
            #line hidden
            this.Write(" - ");
            
            #line 23 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SDType.Name));
            
            #line default
            #line hidden
            this.Write(@"</title>
        <meta name=""viewport"" content=""width=device-width"">

		<link rel=""stylesheet"" type=""text/css"" href=""../stylesheets/reset.css"" />
		<link rel=""stylesheet"" type=""text/css"" href=""../stylesheets/font.css"" />
		<link rel=""stylesheet"" type=""text/css"" href=""../stylesheets/font-awesome.css"" />
		<link rel=""stylesheet"" type=""text/css"" href=""../stylesheets/typography.css"" />
		<link rel=""stylesheet"" type=""text/css"" href=""../stylesheets/layout.css"" />
		<link rel=""stylesheet"" type=""text/css"" href=""../stylesheets/elements.css"" />
		<link rel=""stylesheet"" type=""text/css"" href=""../stylesheets/markdown.css"" />
		<link rel=""stylesheet"" type=""text/css"" href=""../stylesheets/vs.css"" />

		<script src=""../js/vendor/jquery.js""></script>
		<script src=""../js/vendor/jquery.mousewheel.js""></script>
		<script src=""../js/vendor/jquery.panzoom.min.js""></script>
		<script src=""../js/vendor/jquery.hashchange.min.js""></script>
		<script src=""../js/vendor/highlight.pack.js""></script>

		<script src=""../js/SVGPan.js""></script>
		<script src=""../js/MemberNav.js""></script>

		<script>hljs.initHighlightingOnLoad();</script>
    </head>
    <body>        
        
		<div id=""documentation-wrapper"">

			");
            
            #line 50 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 if(!SDType.IsClassDiagramEmpty()) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t<div id=\"sd-class-diagram\">\r\n\t\t\t\t\t");
            
            #line 52 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
	var svg = SDType.GetClassDiagram().ToSvg(270);
						var template = new Templater(Repository, svg); 
						var helper = new Helper(Repository); 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t");
            
            #line 55 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(template.TransformText(helper.TransformLinkToken)));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t</div>\r\n\t\t\t");
            
            #line 57 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t<div id=\"typeIndex\" class=\"typesite\">\r\n\t\t\t\t<div id=\"header\">\r\n\t\t\t\t\t<h2 class" +
                    "=\"type-title\">");
            
            #line 61 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SDType.Name));
            
            #line default
            #line hidden
            this.Write("</h2>\r\n\t\t\t\t\t<span class=\"namespace-title\">Namespace: ");
            
            #line 62 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SDType.Namespace.Fullname));
            
            #line default
            #line hidden
            this.Write("</span>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div id=\"pagecontent\">\r\n\r\n\t\t\t\t\t<h3 class=\"box-title fi" +
                    "rst-heading\">");
            
            #line 67 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Strings.Syntax));
            
            #line default
            #line hidden
            this.Write("</h3>\r\n\t\t\t\t\t<div class=\"divider\">\r\n\t\t\t\t\t\t<span></span>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div cl" +
                    "ass=\"syntax-box\">\r\n\t\t\t\t\t\t<pre class=\"wrap-pre\"><code>");
            
            #line 72 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(WebUtility.HtmlEncode(SDType.Syntax)));
            
            #line default
            #line hidden
            this.Write("</code></pre>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t");
            
            #line 75 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 if(SDType.BaseTypes.Count > 0) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t<h3 class=\"box-title\">");
            
            #line 76 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Strings.BaseType));
            
            #line default
            #line hidden
            this.Write("</h3>\r\n\t\t\t\t\t\t<div class=\"list-box\">\r\n\t\t\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t\t");
            
            #line 79 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 foreach(var baseType in SDType.BaseTypes) { 
								if(baseType.IsProjectStranger) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t<li>");
            
            #line 81 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(baseType.Fullname));
            
            #line default
            #line hidden
            this.Write("</a></li>\r\n\t\t\t\t\t\t\t\t");
            
            #line 82 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t<li><a href=\"../type/");
            
            #line 83 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(baseType.Guid));
            
            #line default
            #line hidden
            this.Write(".html\">");
            
            #line 83 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(baseType.Fullname));
            
            #line default
            #line hidden
            this.Write("</a></li>\r\n\t\t\t\t\t\t\t\t");
            
            #line 84 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t");
            
            #line 85 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t");
            
            #line 88 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t");
            
            #line 90 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 if(SDType.ImplementedInterfaces.Count > 0) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t<h3 class=\"box-title\">");
            
            #line 91 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Strings.Implements));
            
            #line default
            #line hidden
            this.Write("</h3>\r\n\t\t\t\t\t\t<div class=\"list-box\">\r\n\t\t\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t\t");
            
            #line 94 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 foreach(var implementedInterface in SDType.ImplementedInterfaces) {
								if(implementedInterface.IsProjectStranger) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t<li>");
            
            #line 96 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(implementedInterface.Fullname));
            
            #line default
            #line hidden
            this.Write("</a></li>\r\n\t\t\t\t\t\t\t\t");
            
            #line 97 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t<li><a href=\"../type/");
            
            #line 98 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(implementedInterface.Guid));
            
            #line default
            #line hidden
            this.Write(".html\">");
            
            #line 98 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(implementedInterface.Fullname));
            
            #line default
            #line hidden
            this.Write("</a></li>\r\n\t\t\t\t\t\t\t\t");
            
            #line 99 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t");
            
            #line 100 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t");
            
            #line 103 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("        \r\n\t\t\t\t\t");
            
            #line 105 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 if(SDType.Documentation.Count > 0) { 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t\t");
            
            #line 107 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 if(SDType.Documentation[CurrentLanguage].Summary.Count > 0) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t<h3 class=\"box-title\">");
            
            #line 108 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Strings.Summary));
            
            #line default
            #line hidden
            this.Write("</h3>\r\n\t\t\t\t\t\t\t<div class=\"doc-box markdown\">\r\n\t\t\t\t\t\t\t\t");
            
            #line 110 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(new Markdown().Transform(SDType.Documentation[CurrentLanguage].Summary.ToMarkdown())));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t");
            
            #line 112 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t\t");
            
            #line 114 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 if(SDType.Documentation[CurrentLanguage].Remarks.Count > 0) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t<h3 class=\"box-title\">");
            
            #line 115 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Strings.Remarks));
            
            #line default
            #line hidden
            this.Write("</h3>\r\n\t\t\t\t\t\t\t<div class=\"doc-box markdown\">\r\n\t\t\t\t\t\t\t\t");
            
            #line 117 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(new Markdown().Transform(SDType.Documentation[CurrentLanguage].Remarks.ToMarkdown())));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t");
            
            #line 119 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t\t");
            
            #line 121 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 if(SDType.Documentation[CurrentLanguage].Example.Count > 0) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t<h3 class=\"box-title\">");
            
            #line 122 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Strings.Example));
            
            #line default
            #line hidden
            this.Write("</h3>\r\n\t\t\t\t\t\t\t<div class=\"doc-box markdown\">\r\n\t\t\t\t\t\t\t\t");
            
            #line 124 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(new Markdown().Transform(SDType.Documentation[CurrentLanguage].Example.ToMarkdown())));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t");
            
            #line 126 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t\t");
            
            #line 128 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 if(SDType.Documentation[CurrentLanguage].Returns.Count > 0) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t<h3 class=\"box-title\">");
            
            #line 129 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Strings.Returns));
            
            #line default
            #line hidden
            this.Write("</h3>\r\n\t\t\t\t\t\t\t<div class=\"doc-box markdown\">\r\n\t\t\t\t\t\t\t\t");
            
            #line 131 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(new Markdown().Transform(SDType.Documentation[CurrentLanguage].Returns.ToMarkdown())));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t");
            
            #line 133 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t\t");
            
            #line 135 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 if(SDType.Documentation[CurrentLanguage].Exceptions.Count > 0) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t<h3 class=\"box-title\">");
            
            #line 136 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Strings.Exceptions));
            
            #line default
            #line hidden
            this.Write("</h3>\r\n\t\t\t\t\t\t\t<div class=\"doc-box markdown\">\r\n\t\t\t\t\t\t\t\t");
            
            #line 138 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 foreach(var exception in SDType.Documentation[CurrentLanguage].Exceptions) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t<p>");
            
            #line 139 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(exception.Key));
            
            #line default
            #line hidden
            this.Write("</p>\r\n\t\t\t\t\t\t\t\t\t<div class=\"inline\">\r\n\t\t\t\t\t\t\t\t\t\t");
            
            #line 141 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(new Markdown().Transform(exception.Value.ToMarkdown())));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t");
            
            #line 143 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t");
            
            #line 145 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t\t");
            
            #line 147 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 if(SDType.Documentation[CurrentLanguage].Params.Count > 0) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t<h3 class=\"box-title\">");
            
            #line 148 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Strings.Parameters));
            
            #line default
            #line hidden
            this.Write("</h3>\r\n\t\t\t\t\t\t\t<div class=\"doc-box markdown\">\r\n\t\t\t\t\t\t\t\t");
            
            #line 150 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 foreach(var parameter in SDType.Documentation[CurrentLanguage].Params) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t<p>");
            
            #line 151 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Key));
            
            #line default
            #line hidden
            this.Write("</p>\r\n\t\t\t\t\t\t\t\t\t<div class=\"inline\">\r\n\t\t\t\t\t\t\t\t\t\t");
            
            #line 153 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(new Markdown().Transform(parameter.Value.ToMarkdown())));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t");
            
            #line 155 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t");
            
            #line 157 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t\t");
            
            #line 159 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 if(SDType.Documentation[CurrentLanguage].TypeParams.Count > 0) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t<h3 class=\"box-title\">");
            
            #line 160 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Strings.TypeParameters));
            
            #line default
            #line hidden
            this.Write("</h3>\r\n\t\t\t\t\t\t\t<div class=\"doc-box markdown\">\r\n\t\t\t\t\t\t\t\t");
            
            #line 162 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 foreach(var typeParameter in SDType.Documentation[CurrentLanguage].TypeParams) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t<p>");
            
            #line 163 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(typeParameter.Key));
            
            #line default
            #line hidden
            this.Write("</p>\r\n\t\t\t\t\t\t\t\t\t<div class=\"inline\">\r\n\t\t\t\t\t\t\t\t\t\t");
            
            #line 165 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(new Markdown().Transform(typeParameter.Value.ToMarkdown())));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t");
            
            #line 167 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t");
            
            #line 169 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t\t");
            
            #line 171 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 if(SDType.Documentation[CurrentLanguage].SeeAlsos.Count > 0) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t<h3 class=\"box-title\">");
            
            #line 172 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Strings.SeeAlso));
            
            #line default
            #line hidden
            this.Write("</h3>\r\n\t\t\t\t\t\t\t<div class=\"list-box\">\r\n\t\t\t\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t\t\t");
            
            #line 175 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 foreach(var sdToken in SDType.Documentation[CurrentLanguage].SeeAlsos) 
								{ 
									var seeAlso = (SDSeeToken)sdToken;
									if(!string.IsNullOrEmpty(seeAlso.DeclaringType))
									{
										var identifier = string.Format("{0}.{1}", seeAlso.DeclaringType, seeAlso.Name);
										var sdMember = Repository.GetMemberByIdentifier(identifier);
										if(sdMember != null)
                                        {
											
            
            #line default
            #line hidden
            this.Write(" <li><a href=\"../type/");
            
            #line 184 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdMember.DeclaringType.Guid));
            
            #line default
            #line hidden
            this.Write(".html#");
            
            #line 184 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdMember.Guid));
            
            #line default
            #line hidden
            this.Write("\">");
            
            #line 184 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdMember.Name));
            
            #line default
            #line hidden
            this.Write("</a></li> ");
            
            #line 184 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"

                                        }
									}
									else
									{
										var identifier = string.Format("{0}.{1}", seeAlso.Namespace, seeAlso.Name);
										var sdType = Repository.GetTypeByIdentifier(identifier);
										if(sdType != null)
                                        {
											
            
            #line default
            #line hidden
            this.Write(" <li><a href=\"../type/");
            
            #line 193 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdType.Guid));
            
            #line default
            #line hidden
            this.Write(".html\">");
            
            #line 193 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdType.Fullname));
            
            #line default
            #line hidden
            this.Write("</a></li> ");
            
            #line 193 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"

                                        }
									} 
								} 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t");
            
            #line 199 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t");
            
            #line 201 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t");
            
            #line 203 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 if(SDType.Uses.Count > 0) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t<h3 class=\"box-title\">");
            
            #line 204 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Strings.Uses));
            
            #line default
            #line hidden
            this.Write("</h3>\r\n\t\t\t\t\t\t<div class=\"list-box\">\r\n\t\t\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t\t");
            
            #line 207 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 foreach(var use in SDType.Uses) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t<li><a href=\"../type/");
            
            #line 208 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(use.Guid));
            
            #line default
            #line hidden
            this.Write(".html\">");
            
            #line 208 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(use.Name));
            
            #line default
            #line hidden
            this.Write("</a></li>\r\n\t\t\t\t\t\t\t");
            
            #line 209 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t");
            
            #line 212 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t");
            
            #line 214 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 if(SDType.UsedBy.Count > 0) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t<h3 class=\"box-title\">");
            
            #line 215 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Strings.UsedBy));
            
            #line default
            #line hidden
            this.Write("</h3>\r\n\t\t\t\t\t\t<div class=\"list-box\">\r\n\t\t\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t\t");
            
            #line 218 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 foreach(var used in SDType.UsedBy) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t<li><a href=\"../type/");
            
            #line 219 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(used.Guid));
            
            #line default
            #line hidden
            this.Write(".html\">");
            
            #line 219 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(used.Name));
            
            #line default
            #line hidden
            this.Write("</a></li>\r\n\t\t\t\t\t\t\t");
            
            #line 220 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t");
            
            #line 223 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t<h3 class=\"box-title\">");
            
            #line 225 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Strings.Members));
            
            #line default
            #line hidden
            this.Write("</h3>\r\n\t\t\t\t\t<div class=\"table-box\">\r\n\t\t\t\t\t\t<table>\r\n\t\t\t\t\t\t\t<thead>\r\n\t\t\t\t\t\t\t\t<tr>\r" +
                    "\n\t\t\t\t\t\t\t\t\t<td></td>\r\n\t\t\t\t\t\t\t\t\t<td>");
            
            #line 231 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Strings.Name));
            
            #line default
            #line hidden
            this.Write("</td>\r\n\t\t\t\t\t\t\t\t\t<td>");
            
            #line 232 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Strings.Summary));
            
            #line default
            #line hidden
            this.Write("</td>\r\n\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t</thead>\r\n\t\t\t\t\t\t\t<tbody>\t\t\t\r\n\r\n\t\t\t\t\t\t\t\t");
            
            #line 237 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 var even = false; 
								foreach(var sdField in SDType.Fields) { 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t\t\t\t\t<tr ");
            
            #line 240 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 if(even) { even = false; 
            
            #line default
            #line hidden
            this.Write(" class=\"even\" ");
            
            #line 240 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } else { even = true; } 
            
            #line default
            #line hidden
            this.Write(">\r\n\t\t\t\t\t\t\t\t\t\t<td class=\"iconColumn\">\r\n\t\t\t\t\t\t\t\t\t\t\t<img alt=\"Field-Icon\" src=\"../im" +
                    "ages/icons/Field_");
            
            #line 242 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdField.Accessibility));
            
            #line default
            #line hidden
            this.Write(".png\">\r\n\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t\t<a title=\"");
            
            #line 245 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdField.Name));
            
            #line default
            #line hidden
            this.Write("\" href=\"../type/");
            
            #line 245 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SDType.Guid));
            
            #line default
            #line hidden
            this.Write(".html#");
            
            #line 245 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdField.Guid));
            
            #line default
            #line hidden
            this.Write("\">");
            
            #line 245 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdField.Name));
            
            #line default
            #line hidden
            this.Write("</a>\r\n\t\t\t\t\t\t\t\t\t\t</td>\t\r\n\t\t\t\t\t\t\t\t\t\t<td class=\"markdown\">\r\n\t\t\t\t\t\t\t\t\t\t\t");
            
            #line 248 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 if(sdField.Documentation.ContainsKey(CurrentLanguage)) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t\t\t\t");
            
            #line 249 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(new Markdown().Transform(sdField.Documentation[CurrentLanguage].Summary.ToString())));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t\t\t\t\t\t\t");
            
            #line 250 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t");
            
            #line 253 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 }

								foreach(var sdEvent in SDType.Events) { 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t\t\t\t\t<tr ");
            
            #line 257 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 if(even) { even = false; 
            
            #line default
            #line hidden
            this.Write(" class=\"even\" ");
            
            #line 257 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } else { even = true; } 
            
            #line default
            #line hidden
            this.Write(">\r\n\t\t\t\t\t\t\t\t\t\t<td class=\"iconColumn\">\r\n\t\t\t\t\t\t\t\t\t\t\t<img alt=\"Event-Icon\" src=\"../im" +
                    "ages/icons/Event_");
            
            #line 259 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdEvent.Accessibility));
            
            #line default
            #line hidden
            this.Write(".png\">\r\n\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t\t<a title=\"");
            
            #line 262 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdEvent.Name));
            
            #line default
            #line hidden
            this.Write("\" href=\"../type/");
            
            #line 262 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SDType.Guid));
            
            #line default
            #line hidden
            this.Write(".html#");
            
            #line 262 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdEvent.Guid));
            
            #line default
            #line hidden
            this.Write("\">");
            
            #line 262 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdEvent.Name));
            
            #line default
            #line hidden
            this.Write("</a>\r\n\t\t\t\t\t\t\t\t\t\t</td>\t\r\n\t\t\t\t\t\t\t\t\t\t<td class=\"markdown\">\r\n\t\t\t\t\t\t\t\t\t\t\t");
            
            #line 265 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 if(sdEvent.Documentation.ContainsKey(CurrentLanguage)) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t\t\t\t");
            
            #line 266 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(new Markdown().Transform(sdEvent.Documentation[CurrentLanguage].Summary.ToString())));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t\t\t\t\t\t\t");
            
            #line 267 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t");
            
            #line 270 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 }

								foreach(var sdConstructor in SDType.Constructors) { 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t\t\t\t\t<tr ");
            
            #line 274 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 if(even) { even = false; 
            
            #line default
            #line hidden
            this.Write(" class=\"even\" ");
            
            #line 274 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } else { even = true; } 
            
            #line default
            #line hidden
            this.Write(">\r\n\t\t\t\t\t\t\t\t\t\t<td class=\"iconColumn\">\r\n\t\t\t\t\t\t\t\t\t\t\t<img alt=\"Constructor-Icon\" src=" +
                    "\"../images/icons/Method_");
            
            #line 276 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdConstructor.Accessibility));
            
            #line default
            #line hidden
            this.Write(".png\">\r\n\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t\t<a title=\"");
            
            #line 279 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdConstructor.Name));
            
            #line default
            #line hidden
            this.Write("\" href=\"../type/");
            
            #line 279 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SDType.Guid));
            
            #line default
            #line hidden
            this.Write(".html#");
            
            #line 279 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdConstructor.Guid));
            
            #line default
            #line hidden
            this.Write("\">");
            
            #line 279 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdConstructor.Name));
            
            #line default
            #line hidden
            this.Write("</a>\r\n\t\t\t\t\t\t\t\t\t\t</td>\t\r\n\t\t\t\t\t\t\t\t\t\t<td class=\"markdown\">\r\n\t\t\t\t\t\t\t\t\t\t\t");
            
            #line 282 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 if(sdConstructor.Documentation.ContainsKey(CurrentLanguage)) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t\t\t\t");
            
            #line 283 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(new Markdown().Transform(sdConstructor.Documentation[CurrentLanguage].Summary.ToString())));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t\t\t\t\t\t\t");
            
            #line 284 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t");
            
            #line 287 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 }

								foreach(var sdMethod in SDType.Methods) { 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t\t\t\t\t<tr ");
            
            #line 291 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 if(even) { even = false; 
            
            #line default
            #line hidden
            this.Write(" class=\"even\" ");
            
            #line 291 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } else { even = true; } 
            
            #line default
            #line hidden
            this.Write(">\r\n\t\t\t\t\t\t\t\t\t\t<td class=\"iconColumn\">\r\n\t\t\t\t\t\t\t\t\t\t\t<img alt=\"Method-Icon\" src=\"../i" +
                    "mages/icons/Method_");
            
            #line 293 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdMethod.Accessibility));
            
            #line default
            #line hidden
            this.Write(".png\">\r\n\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t\t<a title=\"");
            
            #line 296 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdMethod.Name));
            
            #line default
            #line hidden
            this.Write("\" href=\"../type/");
            
            #line 296 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SDType.Guid));
            
            #line default
            #line hidden
            this.Write(".html#");
            
            #line 296 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdMethod.Guid));
            
            #line default
            #line hidden
            this.Write("\">");
            
            #line 296 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdMethod.Name));
            
            #line default
            #line hidden
            this.Write("</a>\r\n\t\t\t\t\t\t\t\t\t\t</td>\t\r\n\t\t\t\t\t\t\t\t\t\t<td class=\"markdown\">\r\n\t\t\t\t\t\t\t\t\t\t\t");
            
            #line 299 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 if(sdMethod.Documentation.ContainsKey(CurrentLanguage)) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t\t\t\t");
            
            #line 300 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(new Markdown().Transform(sdMethod.Documentation[CurrentLanguage].Summary.ToString())));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t\t\t\t\t\t\t");
            
            #line 301 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t");
            
            #line 304 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 }

								foreach(var sdProperty in SDType.Properties) { 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t\t\t\t\t<tr ");
            
            #line 308 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 if(even) { even = false; 
            
            #line default
            #line hidden
            this.Write(" class=\"even\" ");
            
            #line 308 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } else { even = true; } 
            
            #line default
            #line hidden
            this.Write(">\r\n\t\t\t\t\t\t\t\t\t\t<td class=\"iconColumn\">\r\n\t\t\t\t\t\t\t\t\t\t\t<img alt=\"Property-Icon\" src=\".." +
                    "/images/icons/Properties_");
            
            #line 310 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdProperty.Accessibility));
            
            #line default
            #line hidden
            this.Write(".png\">\r\n\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t\t<a title=\"");
            
            #line 313 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdProperty.Name));
            
            #line default
            #line hidden
            this.Write("\" href=\"../type/");
            
            #line 313 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SDType.Guid));
            
            #line default
            #line hidden
            this.Write(".html#");
            
            #line 313 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdProperty.Guid));
            
            #line default
            #line hidden
            this.Write("\">");
            
            #line 313 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(sdProperty.Name));
            
            #line default
            #line hidden
            this.Write("</a>\r\n\t\t\t\t\t\t\t\t\t\t</td>\t\r\n\t\t\t\t\t\t\t\t\t\t<td class=\"markdown\">\r\n\t\t\t\t\t\t\t\t\t\t\t");
            
            #line 316 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 if(sdProperty.Documentation.ContainsKey(CurrentLanguage)) { 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t\t\t\t");
            
            #line 317 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(new Markdown().Transform(sdProperty.Documentation[CurrentLanguage].Summary.ToString())));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t\t\t\t\t\t\t");
            
            #line 318 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t");
            
            #line 321 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t\t</table>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t");
            
            #line 329 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
	foreach (var constructor in SDType.Constructors)
				{
					var memberTemplate = new MemberTemplate
					{
						Strings = Strings,
						CurrentLanguage = constructor.Documentation.ContainsKey(CurrentLanguage) ? CurrentLanguage : "default",
						SDType = SDType,
						SDMember = constructor,
						Repository = Repository
					}; 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t");
            
            #line 339 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(memberTemplate.TransformText()));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t");
            
            #line 340 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
  }
				foreach (var method in SDType.Methods)
				{
					var memberTemplate = new MemberTemplate
					{
						Strings = Strings,
						CurrentLanguage = method.Documentation.ContainsKey(CurrentLanguage) ? CurrentLanguage : "default",
						SDType = SDType,
						SDMember = method,
						Repository = Repository
					}; 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t");
            
            #line 351 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(memberTemplate.TransformText()));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t");
            
            #line 352 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
  }
				foreach (var field in SDType.Fields)
				{
					var memberTemplate = new MemberTemplate
					{
						Strings = Strings,
						CurrentLanguage = field.Documentation.ContainsKey(CurrentLanguage) ? CurrentLanguage : "default",
						SDType = SDType,
						SDMember = field,
						Repository = Repository
					}; 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t");
            
            #line 363 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(memberTemplate.TransformText()));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t");
            
            #line 364 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
  }
				foreach (var property in SDType.Properties)
				{
					var memberTemplate = new MemberTemplate
					{
						Strings = Strings,
						CurrentLanguage = property.Documentation.ContainsKey(CurrentLanguage) ? CurrentLanguage : "default",
						SDType = SDType,
						SDMember = property,
						Repository = Repository
					}; 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t");
            
            #line 375 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(memberTemplate.TransformText()));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t");
            
            #line 376 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
  }
				foreach (var eve in SDType.Events)
				{
					var memberTemplate = new MemberTemplate
					{
						Strings = Strings,
						CurrentLanguage = eve.Documentation.ContainsKey(CurrentLanguage) ? CurrentLanguage : "default",
						SDType = SDType,
						SDMember = eve,
						Repository = Repository
					}; 
            
            #line default
            #line hidden
            this.Write("\t\t\t\t\t");
            
            #line 387 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(memberTemplate.TransformText()));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t\t");
            
            #line 388 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t</div>\r\n\r\n\t\t<div style=\"clear:both;\"></div>\r\n\r\n    </body>\r\n</html>\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 397 "E:\Programming\Github\SharpDox.Plugins.Html\Templates\Sites\TypeTemplate.tt"
 public IStrings Strings { get; set; }
	public string CurrentLanguage { get; set; }
	public SDRepository Repository { get; set; }
    public SDType SDType { get; set; } 
        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public class TypeTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}

<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Net" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SharpDox.Model.Repository" #>
<#@ import namespace="SharpDox.Model.Repository.Members" #>
<#@ import namespace="SharpDox.Model.Documentation.Token" #>
<#@ import namespace="SharpDox.Sdk.Config" #>
<#@ import namespace="SharpDox.Sdk" #>
<#@ import namespace="SharpDox.UML" #>
<#@ import namespace="MarkdownSharp" #>
<#@ import namespace="SharpDox.Plugins.Html.Templates.Strings" #> 

<#
	var imgurl = string.Empty;
	var name = SDMember.Name;
	if(SDMember is SDField){
		imgurl = "../assets/images/icons/field_" + SDMember.Accessibility + ".png";
	}
	else if(SDMember is SDEvent){
		imgurl = "../assets/images/icons/event_" + SDMember.Accessibility + ".png";
	}
	else if(SDMember is SDMethod){
		imgurl = "../assets/images/icons/method_" + SDMember.Accessibility + ".png";
		name = ((SDMethod)SDMember).Signature;
	}
	else if(SDMember is SDProperty){
		imgurl = "../assets/images/icons/properties_" + SDMember.Accessibility + ".png";
	}
#>

<div id="<#= SDMember.ShortIdentifier #>" class="member">
	<div class="member-header">		
		<a href="#"><i class="icon-caret-right"></i><img src="<#= imgurl #>"/> <p><#= name #></p></a>
		<# if(SDMember.Documentation.Count > 0) { #>
			<# if(SDMember.Documentation[CurrentLanguage].Summary.Count > 0) { #>
				<div class="summary markdown">
					<#= new Markdown().Transform(SDMember.Documentation[CurrentLanguage].Summary.ToMarkdown()) #>
				</div>
			<# } #>
		<# } #>
	</div>

	<div class="member-content">

		<div class="syntax-box">
			<pre class="wrap-pre"><code><#= WebUtility.HtmlEncode(SDMember.Syntax) #></code></pre>
		</div>		
        
		<# if(SDMember.Documentation.Count > 0) { #>
		
			<# if(SDMember.Documentation[CurrentLanguage].Params.Count > 0) { #>
				<p class="member-box-title"><#= Strings.Parameters #></p>
				<div class="member-doc-box markdown">
					<# foreach(var parameter in SDMember.Documentation[CurrentLanguage].Params) { #>
						<p class="key"><#= parameter.Key #></p>
						
						<# if(SDMember is SDMethod){ 
								var sdParam = ((SDMethod)SDMember).Parameters.SingleOrDefault(s => s.Name == parameter.Key);
								if(sdParam != null) { #>
									
									<small><#= sdParam.ParamType.Name #></small>

								<# }
						} #>						
						
						<div class="inline">
							<#= new Markdown().Transform(parameter.Value.ToMarkdown()) #>
						</div>
					<# } #>
				</div>
			<# } #>

			<# if(SDMember.Documentation[CurrentLanguage].TypeParams.Count > 0) { #>
				<p class="member-box-title"><#= Strings.TypeParameters #></p>
				<div class="member-doc-box markdown">
					<# foreach(var typeParameter in SDMember.Documentation[CurrentLanguage].TypeParams) { #>
						<p class="key"><#= typeParameter.Key #></p>						
						<div class="inline">
							<#= new Markdown().Transform(typeParameter.Value.ToMarkdown()) #>
						</div>
					<# } #>
				</div>
			<# } #>

			<# if(SDMember.Documentation[CurrentLanguage].Returns.Count > 0) { #>
				<p class="member-box-title"><#= Strings.Returns #></p>
				<div class="member-doc-box">
					<#= new Markdown().Transform(SDMember.Documentation[CurrentLanguage].Returns.ToMarkdown()) #>
				</div>
			<# } #>

			<# if(SDMember.Documentation[CurrentLanguage].Exceptions.Count > 0) { #>
				<p class="member-box-title"><#= Strings.Exceptions #></p>
				<div class="member-doc-box markdown">
					<# foreach(var exception in SDMember.Documentation[CurrentLanguage].Exceptions) { #>
						<p class="key"><#= exception.Key #></p>
						<div class="inline">
							<#= new Markdown().Transform(exception.Value.ToMarkdown()) #>
						</div>
					<# } #>
				</div>
			<# } #>

			<# if(SDMember.Documentation[CurrentLanguage].Remarks.Count > 0) { #>
				<p class="member-box-title"><#= Strings.Remarks #></p>
				<div class="member-doc-box markdown">
					<#= new Markdown().Transform(SDMember.Documentation[CurrentLanguage].Remarks.ToMarkdown()) #>
				</div>
			<# } #>

			<# if(SDMember.Documentation[CurrentLanguage].Example.Count > 0) { #>
				<p class="member-box-title"><#= Strings.Example #></p>
				<div class="member-doc-box markdown">
					<#= new Markdown().Transform(SDMember.Documentation[CurrentLanguage].Example.ToMarkdown()) #>
				</div>
			<# } #>
						
			<# if(SDMember.Documentation[CurrentLanguage].SeeAlsos.Count > 0) { #>
				<p class="member-box-title"><#= Strings.SeeAlso #></p>
				<div class="list-box">
					<ul>
					<# foreach(var sdToken in SDMember.Documentation[CurrentLanguage].SeeAlsos) 
					{ 
						var seeAlso = (SDSeeToken)sdToken;
						if(!string.IsNullOrEmpty(seeAlso.DeclaringType))
						{
							var identifier = string.Format("{0}.{1}", seeAlso.DeclaringType, seeAlso.Name);
							var sdMember = Repository.GetMemberByIdentifier(identifier);
							if(sdMember != null)
                            {
								#> <li><a href="../type/<#= sdMember.DeclaringType.ShortIdentifier #>.html#<#= sdMember.ShortIdentifier #>"><#= sdMember.Name #></a></li> <#
                            }
						}
						else
						{
							var identifier = string.Format("{0}.{1}", seeAlso.Namespace, seeAlso.Name);
							var sdType = Repository.GetTypeByIdentifier(identifier);
							if(sdType != null)
                            {
								#> <li><a href="../type/<#= sdType.ShortIdentifier #>.html"><#= sdType.Fullname #></a></li> <#
                            }
						} 
					} #>
					</ul>
				</div>
			<# } #>

		<# } #>

		<# if(SDMember is SDMethod && !((SDMethod)SDMember).IsSequenceDiagramEmpty() && !Config.DisableSequenceDiagrams) { #>
			<div id="<#= SDMember.Name #>-diagram" class="sd-sequence-diagram svgpan">
				<#	var sequenceSvg = ((SDMethod)SDMember).GetSequenceDiagram(Repository.GetAllTypes()).ToSvg();
					var template = new Templater(Repository, sequenceSvg); 
					var helper = new Helper(Repository); #>
				<#= template.TransformText(helper.TransformLinkToken) #>
			</div>
			<div class="legend"><p><#= Strings.PanZoom #></p></div>
		<# } #>

	</div>
</div>

<#+ public HtmlConfig Config { get; set; }
	public IStrings Strings { get; set; }
	public string CurrentLanguage { get; set; }
	public SDRepository Repository { get; set; }
    public SDType SDType { get; set; }
	public SDMember SDMember { get; set; } #>